
STM32F103C8T6_BluetoothLE_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006ef8  08006ef8  00016ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006fb0  08006fb0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fb0  08006fb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  0800702c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800702c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa76  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fab  00000000  00000000  0002fb13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00031ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000150ce  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a949  00000000  00000000  000487b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073d4f  00000000  00000000  000530ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  000c6ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006edc 	.word	0x08006edc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006edc 	.word	0x08006edc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <I2C_Read_Register>:
unsigned short dig_T1, dig_P1;
signed short dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
float temperature, pressure, altitude, init_height;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	b299      	uxth	r1, r3
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	f242 7310 	movw	r3, #10000	; 0x2710
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <I2C_Read_Register+0x50>)
 800116e:	f001 fde1 	bl	8002d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b29b      	uxth	r3, r3
 8001176:	3301      	adds	r3, #1
 8001178:	b299      	uxth	r1, r3
 800117a:	f107 0208 	add.w	r2, r7, #8
 800117e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <I2C_Read_Register+0x50>)
 8001188:	f001 fed2 	bl	8002f30 <HAL_I2C_Master_Receive>


	return rx_buff[0];
 800118c:	7a3b      	ldrb	r3, [r7, #8]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000c8 	.word	0x200000c8

0800119c <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	460b      	mov	r3, r1
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	f242 7310 	movw	r3, #10000	; 0x2710
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <I2C_Write_Register+0x38>)
 80011c8:	f001 fdb4 	bl	8002d34 <HAL_I2C_Master_Transmit>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000c8 	.word	0x200000c8

080011d8 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af02      	add	r7, sp, #8
	uint8_t rx_buff[24], starting_address=0x88;
 80011de:	2388      	movs	r3, #136	; 0x88
 80011e0:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	21ee      	movs	r1, #238	; 0xee
 80011ee:	4849      	ldr	r0, [pc, #292]	; (8001314 <BMP280_get_calib_values+0x13c>)
 80011f0:	f001 fda0 	bl	8002d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2318      	movs	r3, #24
 8001200:	21ef      	movs	r1, #239	; 0xef
 8001202:	4844      	ldr	r0, [pc, #272]	; (8001314 <BMP280_get_calib_values+0x13c>)
 8001204:	f001 fe94 	bl	8002f30 <HAL_I2C_Master_Receive>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	b29a      	uxth	r2, r3
 800120c:	7a7b      	ldrb	r3, [r7, #9]
 800120e:	b29b      	uxth	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <BMP280_get_calib_values+0x140>)
 800121a:	801a      	strh	r2, [r3, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	b29a      	uxth	r2, r3
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b29b      	uxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29b      	uxth	r3, r3
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <BMP280_get_calib_values+0x144>)
 8001230:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	b29a      	uxth	r2, r3
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	b29b      	uxth	r3, r3
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <BMP280_get_calib_values+0x148>)
 8001246:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	b29a      	uxth	r2, r3
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <BMP280_get_calib_values+0x14c>)
 800125a:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	b29a      	uxth	r2, r3
 8001260:	7c7b      	ldrb	r3, [r7, #17]
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BMP280_get_calib_values+0x150>)
 8001270:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	b29a      	uxth	r2, r3
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	b29b      	uxth	r3, r3
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <BMP280_get_calib_values+0x154>)
 8001286:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 8001288:	7d3b      	ldrb	r3, [r7, #20]
 800128a:	b29a      	uxth	r2, r3
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	b29b      	uxth	r3, r3
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <BMP280_get_calib_values+0x158>)
 800129c:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <BMP280_get_calib_values+0x15c>)
 80012b2:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 80012b4:	7e3b      	ldrb	r3, [r7, #24]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	7e7b      	ldrb	r3, [r7, #25]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <BMP280_get_calib_values+0x160>)
 80012c8:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 80012ca:	7ebb      	ldrb	r3, [r7, #26]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	7efb      	ldrb	r3, [r7, #27]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <BMP280_get_calib_values+0x164>)
 80012de:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 80012e0:	7f3b      	ldrb	r3, [r7, #28]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	7f7b      	ldrb	r3, [r7, #29]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <BMP280_get_calib_values+0x168>)
 80012f4:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <BMP280_get_calib_values+0x16c>)
 800130a:	801a      	strh	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000c8 	.word	0x200000c8
 8001318:	20000096 	.word	0x20000096
 800131c:	20000098 	.word	0x20000098
 8001320:	200000c4 	.word	0x200000c4
 8001324:	200000bc 	.word	0x200000bc
 8001328:	200000a8 	.word	0x200000a8
 800132c:	200000be 	.word	0x200000be
 8001330:	200000aa 	.word	0x200000aa
 8001334:	200000b4 	.word	0x200000b4
 8001338:	200000c6 	.word	0x200000c6
 800133c:	20000094 	.word	0x20000094
 8001340:	200000c0 	.word	0x200000c0
 8001344:	200000c2 	.word	0x200000c2

08001348 <BMP280_init>:

void BMP280_init(uint8_t register_F4, uint8_t register_F5)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	I2C_Write_Register(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	461a      	mov	r2, r3
 800135c:	21f4      	movs	r1, #244	; 0xf4
 800135e:	20ee      	movs	r0, #238	; 0xee
 8001360:	f7ff ff1c 	bl	800119c <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	461a      	mov	r2, r3
 8001368:	21f5      	movs	r1, #245	; 0xf5
 800136a:	20ee      	movs	r0, #238	; 0xee
 800136c:	f7ff ff16 	bl	800119c <I2C_Write_Register>

	BMP280_get_calib_values();
 8001370:	f7ff ff32 	bl	80011d8 <BMP280_get_calib_values>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0000      	movs	r0, r0
	...

08001380 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b094      	sub	sp, #80	; 0x50
 8001386:	af02      	add	r7, sp, #8
	uint8_t status, rx_buff[6], starting_address=0xF7;
 8001388:	23f7      	movs	r3, #247	; 0xf7
 800138a:	77fb      	strb	r3, [r7, #31]

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 800138c:	21f3      	movs	r1, #243	; 0xf3
 800138e:	20ee      	movs	r0, #238	; 0xee
 8001390:	f7ff feda 	bl	8001148 <I2C_Read_Register>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 800139a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f2      	bne.n	800138c <BMP280_calc_values+0xc>
 80013a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ec      	bne.n	800138c <BMP280_calc_values+0xc>

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 80013b2:	f107 021f 	add.w	r2, r7, #31
 80013b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	21ee      	movs	r1, #238	; 0xee
 80013c0:	48cf      	ldr	r0, [pc, #828]	; (8001700 <BMP280_calc_values+0x380>)
 80013c2:	f001 fcb7 	bl	8002d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 6, 10000);
 80013c6:	f107 0220 	add.w	r2, r7, #32
 80013ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2306      	movs	r3, #6
 80013d2:	21ef      	movs	r1, #239	; 0xef
 80013d4:	48ca      	ldr	r0, [pc, #808]	; (8001700 <BMP280_calc_values+0x380>)
 80013d6:	f001 fdab 	bl	8002f30 <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 80013da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013de:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[4];
 80013e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e4:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[5];
 80013e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013ea:	613b      	str	r3, [r7, #16]
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	031a      	lsls	r2, r3, #12
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	441a      	add	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4bc1      	ldr	r3, [pc, #772]	; (8001704 <BMP280_calc_values+0x384>)
 8001400:	601a      	str	r2, [r3, #0]

	temp[2]=rx_buff[0];
 8001402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001406:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[1];
 8001408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800140c:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[2];
 800140e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001412:	613b      	str	r3, [r7, #16]
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	031a      	lsls	r2, r3, #12
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	441a      	add	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4bb8      	ldr	r3, [pc, #736]	; (8001708 <BMP280_calc_values+0x388>)
 8001428:	601a      	str	r2, [r3, #0]

	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 800142a:	4bb6      	ldr	r3, [pc, #728]	; (8001704 <BMP280_calc_values+0x384>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ffe8 	bl	8000404 <__aeabi_i2d>
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4bb4      	ldr	r3, [pc, #720]	; (800170c <BMP280_calc_values+0x38c>)
 800143a:	f7ff f977 	bl	800072c <__aeabi_ddiv>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4625      	mov	r5, r4
 8001444:	461c      	mov	r4, r3
 8001446:	4bb2      	ldr	r3, [pc, #712]	; (8001710 <BMP280_calc_values+0x390>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffca 	bl	80003e4 <__aeabi_ui2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4baf      	ldr	r3, [pc, #700]	; (8001714 <BMP280_calc_values+0x394>)
 8001456:	f7ff f969 	bl	800072c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe fe81 	bl	8000168 <__aeabi_dsub>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4625      	mov	r5, r4
 800146c:	461c      	mov	r4, r3
 800146e:	4baa      	ldr	r3, [pc, #680]	; (8001718 <BMP280_calc_values+0x398>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffc5 	bl	8000404 <__aeabi_i2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff f829 	bl	80004d8 <__aeabi_dmul>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 800148e:	4b9d      	ldr	r3, [pc, #628]	; (8001704 <BMP280_calc_values+0x384>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffb6 	bl	8000404 <__aeabi_i2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014a0:	f7ff f944 	bl	800072c <__aeabi_ddiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4625      	mov	r5, r4
 80014aa:	461c      	mov	r4, r3
 80014ac:	4b98      	ldr	r3, [pc, #608]	; (8001710 <BMP280_calc_values+0x390>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ff97 	bl	80003e4 <__aeabi_ui2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b98      	ldr	r3, [pc, #608]	; (800171c <BMP280_calc_values+0x39c>)
 80014bc:	f7ff f936 	bl	800072c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fe4e 	bl	8000168 <__aeabi_dsub>
 80014cc:	4603      	mov	r3, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	4625      	mov	r5, r4
 80014d2:	461c      	mov	r4, r3
 80014d4:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <BMP280_calc_values+0x384>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff93 	bl	8000404 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014e6:	f7ff f921 	bl	800072c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4690      	mov	r8, r2
 80014f0:	4699      	mov	r9, r3
 80014f2:	4b87      	ldr	r3, [pc, #540]	; (8001710 <BMP280_calc_values+0x390>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ff74 	bl	80003e4 <__aeabi_ui2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <BMP280_calc_values+0x39c>)
 8001502:	f7ff f913 	bl	800072c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4640      	mov	r0, r8
 800150c:	4649      	mov	r1, r9
 800150e:	f7fe fe2b 	bl	8000168 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe ffdd 	bl	80004d8 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	4625      	mov	r5, r4
 8001524:	461c      	mov	r4, r3
 8001526:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <BMP280_calc_values+0x3a0>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7fe ffcd 	bl	80004d8 <__aeabi_dmul>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	double t_fine = (int32_t)(var1+var2);
 8001546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800154e:	f7fe fe0d 	bl	800016c <__adddf3>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fa6d 	bl	8000a38 <__aeabi_d2iz>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff4f 	bl	8000404 <__aeabi_i2d>
 8001566:	4603      	mov	r3, r0
 8001568:	460c      	mov	r4, r1
 800156a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
volatile	float T = (var1+var2)/5120.0;
 800156e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001572:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001576:	f7fe fdf9 	bl	800016c <__adddf3>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4618      	mov	r0, r3
 8001580:	4621      	mov	r1, r4
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <BMP280_calc_values+0x3a4>)
 8001588:	f7ff f8d0 	bl	800072c <__aeabi_ddiv>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	4618      	mov	r0, r3
 8001592:	4621      	mov	r1, r4
 8001594:	f7ff fa78 	bl	8000a88 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]

	var1=((double)t_fine/2.0)-64000.0;
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015a8:	f7ff f8c0 	bl	800072c <__aeabi_ddiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	4618      	mov	r0, r3
 80015b2:	4621      	mov	r1, r4
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <BMP280_calc_values+0x3a8>)
 80015ba:	f7fe fdd5 	bl	8000168 <__aeabi_dsub>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var2=var1*var1*((double)dig_P6)/32768.0;
 80015c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80015ce:	f7fe ff83 	bl	80004d8 <__aeabi_dmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4625      	mov	r5, r4
 80015d8:	461c      	mov	r4, r3
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <BMP280_calc_values+0x3ac>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff0f 	bl	8000404 <__aeabi_i2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe ff73 	bl	80004d8 <__aeabi_dmul>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4618      	mov	r0, r3
 80015f8:	4621      	mov	r1, r4
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <BMP280_calc_values+0x3b0>)
 8001600:	f7ff f894 	bl	800072c <__aeabi_ddiv>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=var2+var1*((double)dig_P5)*2.0;
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <BMP280_calc_values+0x3b4>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fef6 	bl	8000404 <__aeabi_i2d>
 8001618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800161c:	f7fe ff5c 	bl	80004d8 <__aeabi_dmul>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4618      	mov	r0, r3
 8001626:	4621      	mov	r1, r4
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	f7fe fd9e 	bl	800016c <__adddf3>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	461a      	mov	r2, r3
 8001636:	4623      	mov	r3, r4
 8001638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800163c:	f7fe fd96 	bl	800016c <__adddf3>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <BMP280_calc_values+0x3b8>)
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f7ff f86b 	bl	800072c <__aeabi_ddiv>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	4625      	mov	r5, r4
 800165c:	461c      	mov	r4, r3
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <BMP280_calc_values+0x3bc>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fecd 	bl	8000404 <__aeabi_i2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <BMP280_calc_values+0x3c0>)
 8001670:	f7fe ff32 	bl	80004d8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fd76 	bl	800016c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <BMP280_calc_values+0x3c4>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feb8 	bl	8000404 <__aeabi_i2d>
 8001694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001698:	f7fe ff1e 	bl	80004d8 <__aeabi_dmul>
 800169c:	4603      	mov	r3, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016a8:	f7fe ff16 	bl	80004d8 <__aeabi_dmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4618      	mov	r0, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <BMP280_calc_values+0x3c8>)
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4625      	mov	r5, r4
 80016c4:	461c      	mov	r4, r3
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <BMP280_calc_values+0x3cc>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe99 	bl	8000404 <__aeabi_i2d>
 80016d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016d6:	f7fe feff 	bl	80004d8 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe fd43 	bl	800016c <__adddf3>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <BMP280_calc_values+0x3c8>)
 80016f4:	f7ff f81a 	bl	800072c <__aeabi_ddiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	e028      	b.n	8001750 <BMP280_calc_values+0x3d0>
 80016fe:	bf00      	nop
 8001700:	200000c8 	.word	0x200000c8
 8001704:	200000a0 	.word	0x200000a0
 8001708:	200000a4 	.word	0x200000a4
 800170c:	40d00000 	.word	0x40d00000
 8001710:	20000096 	.word	0x20000096
 8001714:	40900000 	.word	0x40900000
 8001718:	20000098 	.word	0x20000098
 800171c:	40c00000 	.word	0x40c00000
 8001720:	200000c4 	.word	0x200000c4
 8001724:	40b40000 	.word	0x40b40000
 8001728:	40ef4000 	.word	0x40ef4000
 800172c:	200000c6 	.word	0x200000c6
 8001730:	40e00000 	.word	0x40e00000
 8001734:	200000b4 	.word	0x200000b4
 8001738:	40100000 	.word	0x40100000
 800173c:	200000aa 	.word	0x200000aa
 8001740:	40f00000 	.word	0x40f00000
 8001744:	200000be 	.word	0x200000be
 8001748:	41200000 	.word	0x41200000
 800174c:	200000a8 	.word	0x200000a8
 8001750:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b77      	ldr	r3, [pc, #476]	; (8001938 <BMP280_calc_values+0x5b8>)
 800175a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800175e:	f7fe ffe5 	bl	800072c <__aeabi_ddiv>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b73      	ldr	r3, [pc, #460]	; (800193c <BMP280_calc_values+0x5bc>)
 8001770:	f7fe fcfc 	bl	800016c <__adddf3>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4625      	mov	r5, r4
 800177a:	461c      	mov	r4, r3
 800177c:	4b70      	ldr	r3, [pc, #448]	; (8001940 <BMP280_calc_values+0x5c0>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe2f 	bl	80003e4 <__aeabi_ui2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fea3 	bl	80004d8 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
volatile	double p=1048576.0-(double)pressure_raw;
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <BMP280_calc_values+0x5c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe30 	bl	8000404 <__aeabi_i2d>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	f04f 0000 	mov.w	r0, #0
 80017b0:	4965      	ldr	r1, [pc, #404]	; (8001948 <BMP280_calc_values+0x5c8>)
 80017b2:	f7fe fcd9 	bl	8000168 <__aeabi_dsub>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	e9c7 3400 	strd	r3, r4, [r7]
	p=(p-(var2/4096.0))*6250.0/var1;
 80017be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <BMP280_calc_values+0x5cc>)
 80017c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017cc:	f7fe ffae 	bl	800072c <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fcc6 	bl	8000168 <__aeabi_dsub>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	4618      	mov	r0, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	a352      	add	r3, pc, #328	; (adr r3, 8001930 <BMP280_calc_values+0x5b0>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe fe75 	bl	80004d8 <__aeabi_dmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017fa:	f7fe ff97 	bl	800072c <__aeabi_ddiv>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	e9c7 3400 	strd	r3, r4, [r7]
	var1=((double)dig_P9)*p*p/2147483648.0;
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <BMP280_calc_values+0x5d0>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf9 	bl	8000404 <__aeabi_i2d>
 8001812:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	f7fe fe5d 	bl	80004d8 <__aeabi_dmul>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4618      	mov	r0, r3
 8001824:	4621      	mov	r1, r4
 8001826:	e9d7 3400 	ldrd	r3, r4, [r7]
 800182a:	461a      	mov	r2, r3
 800182c:	4623      	mov	r3, r4
 800182e:	f7fe fe53 	bl	80004d8 <__aeabi_dmul>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b45      	ldr	r3, [pc, #276]	; (8001954 <BMP280_calc_values+0x5d4>)
 8001840:	f7fe ff74 	bl	800072c <__aeabi_ddiv>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var2=p*((double)dig_P8)/32768.0;
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <BMP280_calc_values+0x5d8>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fdd6 	bl	8000404 <__aeabi_i2d>
 8001858:	e9d7 3400 	ldrd	r3, r4, [r7]
 800185c:	461a      	mov	r2, r3
 800185e:	4623      	mov	r3, r4
 8001860:	f7fe fe3a 	bl	80004d8 <__aeabi_dmul>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <BMP280_calc_values+0x5b8>)
 8001872:	f7fe ff5b 	bl	800072c <__aeabi_ddiv>
 8001876:	4603      	mov	r3, r0
 8001878:	460c      	mov	r4, r1
 800187a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	p=p+(var1+var2+((double)dig_P7))/16.0;
 800187e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001882:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001886:	f7fe fc71 	bl	800016c <__adddf3>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	4625      	mov	r5, r4
 8001890:	461c      	mov	r4, r3
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <BMP280_calc_values+0x5dc>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fdb3 	bl	8000404 <__aeabi_i2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fc61 	bl	800016c <__adddf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	4618      	mov	r0, r3
 80018b0:	4621      	mov	r1, r4
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <BMP280_calc_values+0x5e0>)
 80018b8:	f7fe ff38 	bl	800072c <__aeabi_ddiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	f7fe fc4e 	bl	800016c <__adddf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	e9c7 3400 	strd	r3, r4, [r7]

	temperature=T;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <BMP280_calc_values+0x5e4>)
 80018dc:	6013      	str	r3, [r2, #0]
	pressure=p;
 80018de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018e2:	4618      	mov	r0, r3
 80018e4:	4621      	mov	r1, r4
 80018e6:	f7ff f8cf 	bl	8000a88 <__aeabi_d2f>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <BMP280_calc_values+0x5e8>)
 80018ee:	601a      	str	r2, [r3, #0]
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <BMP280_calc_values+0x5e8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	491d      	ldr	r1, [pc, #116]	; (800196c <BMP280_calc_values+0x5ec>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fad8 	bl	8000eac <__aeabi_fdiv>
 80018fc:	4603      	mov	r3, r0
 80018fe:	491c      	ldr	r1, [pc, #112]	; (8001970 <BMP280_calc_values+0x5f0>)
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fe6b 	bl	80055dc <powf>
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800190e:	f7ff f90f 	bl	8000b30 <__aeabi_fsub>
 8001912:	4603      	mov	r3, r0
 8001914:	4917      	ldr	r1, [pc, #92]	; (8001974 <BMP280_calc_values+0x5f4>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa14 	bl	8000d44 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <BMP280_calc_values+0x5f8>)
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	3748      	adds	r7, #72	; 0x48
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800192e:	bf00      	nop
 8001930:	00000000 	.word	0x00000000
 8001934:	40b86a00 	.word	0x40b86a00
 8001938:	40e00000 	.word	0x40e00000
 800193c:	3ff00000 	.word	0x3ff00000
 8001940:	200000bc 	.word	0x200000bc
 8001944:	200000a4 	.word	0x200000a4
 8001948:	41300000 	.word	0x41300000
 800194c:	40b00000 	.word	0x40b00000
 8001950:	200000c2 	.word	0x200000c2
 8001954:	41e00000 	.word	0x41e00000
 8001958:	200000c0 	.word	0x200000c0
 800195c:	20000094 	.word	0x20000094
 8001960:	40300000 	.word	0x40300000
 8001964:	2000009c 	.word	0x2000009c
 8001968:	200000b0 	.word	0x200000b0
 800196c:	47c5e680 	.word	0x47c5e680
 8001970:	3e42dcae 	.word	0x3e42dcae
 8001974:	472d2a00 	.word	0x472d2a00
 8001978:	200000b8 	.word	0x200000b8

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001980:	f000 fd36 	bl	80023f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001984:	f000 f83c 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001988:	f000 f926 	bl	8001bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800198c:	f000 f8fa 	bl	8001b84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001990:	f000 f87c 	bl	8001a8c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001994:	f000 f8a8 	bl	8001ae8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8001998:	20c8      	movs	r0, #200	; 0xc8
 800199a:	f000 fd8b 	bl	80024b4 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <main+0x70>)
 80019a6:	f001 f885 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ae:	f000 fd81 	bl	80024b4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+NAMEBMP280", strlen("AT+NAMEBMP280"), 500);
 80019b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b6:	220d      	movs	r2, #13
 80019b8:	490d      	ldr	r1, [pc, #52]	; (80019f0 <main+0x74>)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <main+0x78>)
 80019bc:	f002 ffdf 	bl	800497e <HAL_UART_Transmit>
  memset(buffer, 0, sizeof(buffer));
 80019c0:	2232      	movs	r2, #50	; 0x32
 80019c2:	2100      	movs	r1, #0
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <main+0x7c>)
 80019c6:	f003 fc9d 	bl	8005304 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <main+0x80>)
 80019cc:	f002 fc2d 	bl	800422a <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <main+0x78>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <main+0x78>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	60da      	str	r2, [r3, #12]
  BMP280_init(F4_osrs_t_oversampling16|
 80019e0:	210a      	movs	r1, #10
 80019e2:	20b7      	movs	r0, #183	; 0xb7
 80019e4:	f7ff fcb0 	bl	8001348 <BMP280_init>
			  F5_spi4w_en);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <main+0x6c>
 80019ea:	bf00      	nop
 80019ec:	40011000 	.word	0x40011000
 80019f0:	08006ef8 	.word	0x08006ef8
 80019f4:	2000015c 	.word	0x2000015c
 80019f8:	2000019c 	.word	0x2000019c
 80019fc:	2000011c 	.word	0x2000011c

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	2228      	movs	r2, #40	; 0x28
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fc78 	bl	8005304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 ffa7 	bl	800399c <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a54:	f000 f91e 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2102      	movs	r1, #2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fa11 	bl	8003e9c <HAL_RCC_ClockConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a80:	f000 f908 	bl	8001c94 <Error_Handler>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3740      	adds	r7, #64	; 0x40
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_I2C1_Init+0x50>)
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <MX_I2C1_Init+0x54>)
 8001a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_I2C1_Init+0x50>)
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x58>)
 8001a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_I2C1_Init+0x50>)
 8001aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_I2C1_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_I2C1_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_I2C1_Init+0x50>)
 8001aca:	f001 f80b 	bl	8002ae4 <HAL_I2C_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad4:	f000 f8de 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000c8 	.word	0x200000c8
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	000186a0 	.word	0x000186a0

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b0e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b1c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b30:	f002 fb50 	bl	80041d4 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b3a:	f000 f8ab 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b4c:	f002 fc98 	bl	8004480 <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b56:	f000 f89d 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM2_Init+0x98>)
 8001b68:	f002 fe66 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b72:	f000 f88f 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000011c 	.word	0x2000011c

08001b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <MX_USART2_UART_Init+0x50>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	f002 fe92 	bl	80048e4 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bc6:	f000 f865 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000015c 	.word	0x2000015c
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_GPIO_Init+0xb4>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	480f      	ldr	r0, [pc, #60]	; (8001c90 <MX_GPIO_Init+0xb8>)
 8001c54:	f000 ff2e 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c5e:	480c      	ldr	r0, [pc, #48]	; (8001c90 <MX_GPIO_Init+0xb8>)
 8001c60:	f000 ff28 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 8001c64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_GPIO_Init+0xb8>)
 8001c7e:	f000 fdbf 	bl	8002800 <HAL_GPIO_Init>

}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40011000 	.word	0x40011000

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <reverse>:
char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
	while (i < j)
 8001cb4:	e018      	b.n	8001ce8 <reverse+0x48>
	{
		temp = str[i];
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	441a      	add	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	440b      	add	r3, r1
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
		i++; j--;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
	while (i < j)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbe2      	blt.n	8001cb6 <reverse+0x16>
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
	...

08001cfc <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
	while (x)
 8001d0c:	e01d      	b.n	8001d4a <intToStr+0x4e>
	{
		str[i++] = (x % 10) + '0';
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <intToStr+0x8c>)
 8001d12:	fb83 1302 	smull	r1, r3, r3, r2
 8001d16:	1099      	asrs	r1, r3, #2
 8001d18:	17d3      	asrs	r3, r2, #31
 8001d1a:	1ac9      	subs	r1, r1, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	1ad1      	subs	r1, r2, r3
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1c59      	adds	r1, r3, #1
 8001d2c:	6179      	str	r1, [r7, #20]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	440b      	add	r3, r1
 8001d34:	3230      	adds	r2, #48	; 0x30
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <intToStr+0x8c>)
 8001d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d42:	1092      	asrs	r2, r2, #2
 8001d44:	17db      	asrs	r3, r3, #31
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	60fb      	str	r3, [r7, #12]
	while (x)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1de      	bne.n	8001d0e <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8001d50:	e007      	b.n	8001d62 <intToStr+0x66>
		str[i++] = '0';
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	617a      	str	r2, [r7, #20]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2230      	movs	r2, #48	; 0x30
 8001d60:	701a      	strb	r2, [r3, #0]
	while (i < d)
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf3      	blt.n	8001d52 <intToStr+0x56>

	reverse(str, i);
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	68b8      	ldr	r0, [r7, #8]
 8001d6e:	f7ff ff97 	bl	8001ca0 <reverse>
	str[i] = '\0';
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	4413      	add	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
	return i;
 8001d7c:	697b      	ldr	r3, [r7, #20]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	66666667 	.word	0x66666667

08001d8c <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b090      	sub	sp, #64	; 0x40
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	unsigned char minus_flag = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (n < 0)
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff f96c 	bl	8001080 <__aeabi_fcmplt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <ftoa+0x30>
	{
		minus_flag = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dba:	60fb      	str	r3, [r7, #12]
	}

	// Extract integer part
	int ipart = (int)n;
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff f99d 	bl	80010fc <__aeabi_f2iz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38

	// Extract floating part
	float fpart = n - (float)ipart;
 8001dc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001dc8:	f7fe ff68 	bl	8000c9c <__aeabi_i2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7fe fead 	bl	8000b30 <__aeabi_fsub>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001de0:	f7ff ff8c 	bl	8001cfc <intToStr>
 8001de4:	6338      	str	r0, [r7, #48]	; 0x30

	// check for display option after point
	if (afterpoint != 0)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02c      	beq.n	8001e46 <ftoa+0xba>
	{
		res[i] = '.';  // add dot
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	222e      	movs	r2, #46	; 0x2e
 8001df4:	701a      	strb	r2, [r3, #0]

					   // Get the value of fraction part upto given no.
					   // of points after dot. The third parameter is needed
					   // to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 8001df6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001df8:	f7fe fb16 	bl	8000428 <__aeabi_f2d>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	460d      	mov	r5, r1
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7fe faff 	bl	8000404 <__aeabi_i2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	493b      	ldr	r1, [pc, #236]	; (8001efc <ftoa+0x170>)
 8001e10:	f003 fa88 	bl	8005324 <pow>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fb5c 	bl	80004d8 <__aeabi_dmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4618      	mov	r0, r3
 8001e26:	4621      	mov	r1, r4
 8001e28:	f7fe fe2e 	bl	8000a88 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34

		intToStr((int)fpart, res + i + 1, afterpoint);
 8001e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e32:	f7ff f963 	bl	80010fc <__aeabi_f2iz>
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	3301      	adds	r3, #1
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7ff ff5b 	bl	8001cfc <intToStr>
	}

	char string[30];
	if (minus_flag == 1)
 8001e46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d131      	bne.n	8001eb2 <ftoa+0x126>
	{
		memset(string, 0, 30);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	221e      	movs	r2, #30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fa54 	bl	8005304 <memset>
		string[0] = '-';
 8001e5c:	232d      	movs	r3, #45	; 0x2d
 8001e5e:	743b      	strb	r3, [r7, #16]
		if (n < 1.0f)
 8001e60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff f90b 	bl	8001080 <__aeabi_fcmplt>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <ftoa+0xf8>
		{
			string[1] = '0';
 8001e70:	2330      	movs	r3, #48	; 0x30
 8001e72:	747b      	strb	r3, [r7, #17]
			strcpy(&string[2], res);
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	3302      	adds	r3, #2
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fa49 	bl	8005314 <strcpy>
 8001e82:	e006      	b.n	8001e92 <ftoa+0x106>
		}
		else
			strcpy(&string[1], res);
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	3301      	adds	r3, #1
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fa41 	bl	8005314 <strcpy>

		memset(res, 0, strlen(res));
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7fe f95c 	bl	8000150 <strlen>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f003 fa30 	bl	8005304 <memset>
		strcpy(res, string);
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	68b8      	ldr	r0, [r7, #8]
 8001eac:	f003 fa32 	bl	8005314 <strcpy>
			strcpy(&string[1], res);
			memset(res, 0, strlen(res));
			strcpy(res, string);
		}

}
 8001eb0:	e020      	b.n	8001ef4 <ftoa+0x168>
		if (n < 1.0f)
 8001eb2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff f8e2 	bl	8001080 <__aeabi_fcmplt>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d100      	bne.n	8001ec4 <ftoa+0x138>
}
 8001ec2:	e017      	b.n	8001ef4 <ftoa+0x168>
			string[0] = '0';
 8001ec4:	2330      	movs	r3, #48	; 0x30
 8001ec6:	743b      	strb	r3, [r7, #16]
			strcpy(&string[1], res);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	3301      	adds	r3, #1
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fa1f 	bl	8005314 <strcpy>
			memset(res, 0, strlen(res));
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f7fe f93a 	bl	8000150 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	68b8      	ldr	r0, [r7, #8]
 8001ee4:	f003 fa0e 	bl	8005304 <memset>
			strcpy(res, string);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f003 fa10 	bl	8005314 <strcpy>
}
 8001ef4:	bf00      	nop
 8001ef6:	3740      	adds	r7, #64	; 0x40
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}
 8001efc:	40240000 	.word	0x40240000

08001f00 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	75bb      	strb	r3, [r7, #22]
 8001f16:	e012      	b.n	8001f3e <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8001f18:	7dbb      	ldrb	r3, [r7, #22]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	7dbb      	ldrb	r3, [r7, #22]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	440b      	add	r3, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d103      	bne.n	8001f34 <string_compare+0x34>
	   	  		  comVAR++;
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
 8001f32:	e001      	b.n	8001f38 <string_compare+0x38>
	   	  	  else comVAR=0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	75bb      	strb	r3, [r7, #22]
 8001f3e:	7dbb      	ldrb	r3, [r7, #22]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	88fa      	ldrh	r2, [r7, #6]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8e7      	bhi.n	8001f18 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d101      	bne.n	8001f56 <string_compare+0x56>
		 	return 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <string_compare+0x58>
	 else 	return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <Message_handler>:

void Message_handler()
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b08f      	sub	sp, #60	; 0x3c
 8001f68:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "get", strlen("get")))
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	493f      	ldr	r1, [pc, #252]	; (800206c <Message_handler+0x108>)
 8001f6e:	4840      	ldr	r0, [pc, #256]	; (8002070 <Message_handler+0x10c>)
 8001f70:	f7ff ffc6 	bl	8001f00 <string_compare>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d069      	beq.n	800204e <Message_handler+0xea>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f80:	483c      	ldr	r0, [pc, #240]	; (8002074 <Message_handler+0x110>)
 8001f82:	f000 fd97 	bl	8002ab4 <HAL_GPIO_WritePin>
		BMP280_calc_values();
 8001f86:	f7ff f9fb 	bl	8001380 <BMP280_calc_values>
		char string[50];
		memset(string, 0, sizeof(string));
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2232      	movs	r2, #50	; 0x32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f9b7 	bl	8005304 <memset>
		ftoa(temperature, &string[0], 3);
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <Message_handler+0x114>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1d39      	adds	r1, r7, #4
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fef4 	bl	8001d8c <ftoa>
		strcat(string, ",");
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f8d2 	bl	8000150 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4931      	ldr	r1, [pc, #196]	; (800207c <Message_handler+0x118>)
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	8013      	strh	r3, [r2, #0]
		ftoa(pressure, &string[strlen(string)], 3);
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <Message_handler+0x11c>)
 8001fc0:	681c      	ldr	r4, [r3, #0]
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f8c3 	bl	8000150 <strlen>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fed9 	bl	8001d8c <ftoa>
		strcat(string, ",");
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f8b7 	bl	8000150 <strlen>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	4924      	ldr	r1, [pc, #144]	; (800207c <Message_handler+0x118>)
 8001fec:	461a      	mov	r2, r3
 8001fee:	460b      	mov	r3, r1
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	8013      	strh	r3, [r2, #0]
		ftoa(altitude, &string[strlen(string)], 3);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <Message_handler+0x120>)
 8001ff6:	681c      	ldr	r4, [r3, #0]
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8a8 	bl	8000150 <strlen>
 8002000:	4602      	mov	r2, r0
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4413      	add	r3, r2
 8002006:	2203      	movs	r2, #3
 8002008:	4619      	mov	r1, r3
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff febe 	bl	8001d8c <ftoa>
		strcat(string, "\n");
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f89c 	bl	8000150 <strlen>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4413      	add	r3, r2
 8002020:	4919      	ldr	r1, [pc, #100]	; (8002088 <Message_handler+0x124>)
 8002022:	461a      	mov	r2, r3
 8002024:	460b      	mov	r3, r1
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 500);
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe f88f 	bl	8000150 <strlen>
 8002032:	4603      	mov	r3, r0
 8002034:	b29a      	uxth	r2, r3
 8002036:	1d39      	adds	r1, r7, #4
 8002038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800203c:	4813      	ldr	r0, [pc, #76]	; (800208c <Message_handler+0x128>)
 800203e:	f002 fc9e 	bl	800497e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <Message_handler+0x110>)
 800204a:	f000 fd33 	bl	8002ab4 <HAL_GPIO_WritePin>
	}

	memset(buffer, 0, sizeof(buffer));
 800204e:	2232      	movs	r2, #50	; 0x32
 8002050:	2100      	movs	r1, #0
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <Message_handler+0x10c>)
 8002054:	f003 f956 	bl	8005304 <memset>
	buffer_index = 0;
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <Message_handler+0x12c>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <Message_handler+0x130>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
}
 8002064:	bf00      	nop
 8002066:	373c      	adds	r7, #60	; 0x3c
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	08006f08 	.word	0x08006f08
 8002070:	2000019c 	.word	0x2000019c
 8002074:	40011000 	.word	0x40011000
 8002078:	2000009c 	.word	0x2000009c
 800207c:	08006f0c 	.word	0x08006f0c
 8002080:	200000b0 	.word	0x200000b0
 8002084:	200000b8 	.word	0x200000b8
 8002088:	08006f10 	.word	0x08006f10
 800208c:	2000015c 	.word	0x2000015c
 8002090:	20000091 	.word	0x20000091
 8002094:	20000090 	.word	0x20000090

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_MspInit+0x5c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_MspInit+0x5c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_MspInit+0x5c>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x5c>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_MspInit+0x5c>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_MspInit+0x5c>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_MspInit+0x60>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_MspInit+0x60>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000

080020fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_I2C_MspInit+0x70>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d123      	bne.n	8002164 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_I2C_MspInit+0x74>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_I2C_MspInit+0x74>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_I2C_MspInit+0x74>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002134:	23c0      	movs	r3, #192	; 0xc0
 8002136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002138:	2312      	movs	r3, #18
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	480b      	ldr	r0, [pc, #44]	; (8002174 <HAL_I2C_MspInit+0x78>)
 8002148:	f000 fb5a 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_I2C_MspInit+0x74>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_I2C_MspInit+0x74>)
 8002152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002156:	61d3      	str	r3, [r2, #28]
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_I2C_MspInit+0x74>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	40021000 	.word	0x40021000
 8002174:	40010c00 	.word	0x40010c00

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d113      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 fa7d 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 fa96 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_UART_MspInit+0x98>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d137      	bne.n	8002250 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_UART_MspInit+0x9c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_UART_MspInit+0x9c>)
 80021e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_UART_MspInit+0x9c>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_UART_MspInit+0x9c>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_UART_MspInit+0x9c>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_UART_MspInit+0x9c>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002210:	2304      	movs	r3, #4
 8002212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4619      	mov	r1, r3
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <HAL_UART_MspInit+0xa0>)
 8002224:	f000 faec 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002228:	2308      	movs	r3, #8
 800222a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <HAL_UART_MspInit+0xa0>)
 800223c:	f000 fae0 	bl	8002800 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2026      	movs	r0, #38	; 0x26
 8002246:	f000 fa2e 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800224a:	2026      	movs	r0, #38	; 0x26
 800224c:	f000 fa47 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40004400 	.word	0x40004400
 800225c:	40021000 	.word	0x40021000
 8002260:	40010800 	.word	0x40010800

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <HardFault_Handler+0x4>

08002276 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <MemManage_Handler+0x4>

0800227c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <BusFault_Handler+0x4>

08002282 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <UsageFault_Handler+0x4>

08002288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b0:	f000 f8e4 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <TIM2_IRQHandler+0x30>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <TIM2_IRQHandler+0x18>
		timer_count++;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <TIM2_IRQHandler+0x34>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <TIM2_IRQHandler+0x34>)
 80022ce:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <TIM2_IRQHandler+0x34>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <TIM2_IRQHandler+0x24>
		Message_handler();
 80022d8:	f7ff fe44 	bl	8001f64 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <TIM2_IRQHandler+0x38>)
 80022de:	f001 ffc7 	bl	8004270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000019c 	.word	0x2000019c
 80022ec:	20000090 	.word	0x20000090
 80022f0:	2000011c 	.word	0x2000011c

080022f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <USART2_IRQHandler+0x3c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	b2d1      	uxtb	r1, r2
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <USART2_IRQHandler+0x3c>)
 8002302:	7011      	strb	r1, [r2, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <USART2_IRQHandler+0x40>)
 8002308:	18d1      	adds	r1, r2, r3
 800230a:	230a      	movs	r3, #10
 800230c:	2201      	movs	r2, #1
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <USART2_IRQHandler+0x44>)
 8002310:	f002 fbce 	bl	8004ab0 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <USART2_IRQHandler+0x3c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3b01      	subs	r3, #1
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <USART2_IRQHandler+0x40>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d101      	bne.n	8002326 <USART2_IRQHandler+0x32>
		Message_handler();
 8002322:	f7ff fe1f 	bl	8001f64 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <USART2_IRQHandler+0x44>)
 8002328:	f002 fc68 	bl	8004bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000091 	.word	0x20000091
 8002334:	2000019c 	.word	0x2000019c
 8002338:	2000015c 	.word	0x2000015c

0800233c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <SystemInit+0x5c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <SystemInit+0x5c>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <SystemInit+0x5c>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4911      	ldr	r1, [pc, #68]	; (8002398 <SystemInit+0x5c>)
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <SystemInit+0x60>)
 8002354:	4013      	ands	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <SystemInit+0x5c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <SystemInit+0x5c>)
 800235e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <SystemInit+0x5c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SystemInit+0x5c>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SystemInit+0x5c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <SystemInit+0x5c>)
 800237a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800237e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SystemInit+0x5c>)
 8002382:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002386:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SystemInit+0x64>)
 800238a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000
 800239c:	f8ff0000 	.word	0xf8ff0000
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023a6:	e003      	b.n	80023b0 <LoopCopyDataInit>

080023a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023ae:	3104      	adds	r1, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023b0:	480a      	ldr	r0, [pc, #40]	; (80023dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023b8:	d3f6      	bcc.n	80023a8 <CopyDataInit>
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023bc:	e002      	b.n	80023c4 <LoopFillZerobss>

080023be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023c0:	f842 3b04 	str.w	r3, [r2], #4

080023c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023c8:	d3f9      	bcc.n	80023be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ca:	f7ff ffb7 	bl	800233c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ce:	f002 ff75 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023d2:	f7ff fad3 	bl	800197c <main>
  bx lr
 80023d6:	4770      	bx	lr
  ldr r3, =_sidata
 80023d8:	08006fb8 	.word	0x08006fb8
  ldr r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023e0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80023e4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80023e8:	200001d4 	.word	0x200001d4

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_Init+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_Init+0x28>)
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 f945 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff fe44 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f95d 	bl	80026fa <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 f925 	bl	80026a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	20000008 	.word	0x20000008
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_IncTick+0x1c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x20>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_IncTick+0x20>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000008 	.word	0x20000008
 800249c:	200001d0 	.word	0x200001d0

080024a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <HAL_GetTick+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	200001d0 	.word	0x200001d0

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_Delay+0x40>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffe0 	bl	80024a0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000008 	.word	0x20000008

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4906      	ldr	r1, [pc, #24]	; (8002590 <__NVIC_EnableIRQ+0x34>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff90 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff2d 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff42 	bl	8002540 <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff90 	bl	80025e8 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5f 	bl	8002594 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff35 	bl	800255c <__NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffa2 	bl	800264c <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002726:	2b02      	cmp	r3, #2
 8002728:	d005      	beq.n	8002736 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e051      	b.n	80027da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 020e 	bic.w	r2, r2, #14
 8002744:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_DMA_Abort_IT+0xd0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d029      	beq.n	80027b4 <HAL_DMA_Abort_IT+0xa0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_DMA_Abort_IT+0xd4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x9c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <HAL_DMA_Abort_IT+0xd8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01a      	beq.n	80027aa <HAL_DMA_Abort_IT+0x96>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_DMA_Abort_IT+0xdc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d012      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x90>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <HAL_DMA_Abort_IT+0xe0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00a      	beq.n	800279e <HAL_DMA_Abort_IT+0x8a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_DMA_Abort_IT+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d102      	bne.n	8002798 <HAL_DMA_Abort_IT+0x84>
 8002792:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002796:	e00e      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 8002798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800279c:	e00b      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 800279e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a2:	e008      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 80027a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a8:	e005      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 80027aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ae:	e002      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 80027b0:	2310      	movs	r3, #16
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 80027b4:	2301      	movs	r3, #1
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_DMA_Abort_IT+0xe8>)
 80027b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
    } 
  }
  return status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40020008 	.word	0x40020008
 80027e8:	4002001c 	.word	0x4002001c
 80027ec:	40020030 	.word	0x40020030
 80027f0:	40020044 	.word	0x40020044
 80027f4:	40020058 	.word	0x40020058
 80027f8:	4002006c 	.word	0x4002006c
 80027fc:	40020000 	.word	0x40020000

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b08b      	sub	sp, #44	; 0x2c
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002812:	e127      	b.n	8002a64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002814:	2201      	movs	r2, #1
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	429a      	cmp	r2, r3
 800282e:	f040 8116 	bne.w	8002a5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b12      	cmp	r3, #18
 8002838:	d034      	beq.n	80028a4 <HAL_GPIO_Init+0xa4>
 800283a:	2b12      	cmp	r3, #18
 800283c:	d80d      	bhi.n	800285a <HAL_GPIO_Init+0x5a>
 800283e:	2b02      	cmp	r3, #2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x9a>
 8002842:	2b02      	cmp	r3, #2
 8002844:	d804      	bhi.n	8002850 <HAL_GPIO_Init+0x50>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d031      	beq.n	80028ae <HAL_GPIO_Init+0xae>
 800284a:	2b01      	cmp	r3, #1
 800284c:	d01c      	beq.n	8002888 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800284e:	e048      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002850:	2b03      	cmp	r3, #3
 8002852:	d043      	beq.n	80028dc <HAL_GPIO_Init+0xdc>
 8002854:	2b11      	cmp	r3, #17
 8002856:	d01b      	beq.n	8002890 <HAL_GPIO_Init+0x90>
          break;
 8002858:	e043      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800285a:	4a89      	ldr	r2, [pc, #548]	; (8002a80 <HAL_GPIO_Init+0x280>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d026      	beq.n	80028ae <HAL_GPIO_Init+0xae>
 8002860:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <HAL_GPIO_Init+0x280>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d806      	bhi.n	8002874 <HAL_GPIO_Init+0x74>
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_GPIO_Init+0x284>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d020      	beq.n	80028ae <HAL_GPIO_Init+0xae>
 800286c:	4a86      	ldr	r2, [pc, #536]	; (8002a88 <HAL_GPIO_Init+0x288>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_GPIO_Init+0xae>
          break;
 8002872:	e036      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002874:	4a85      	ldr	r2, [pc, #532]	; (8002a8c <HAL_GPIO_Init+0x28c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0xae>
 800287a:	4a85      	ldr	r2, [pc, #532]	; (8002a90 <HAL_GPIO_Init+0x290>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d016      	beq.n	80028ae <HAL_GPIO_Init+0xae>
 8002880:	4a84      	ldr	r2, [pc, #528]	; (8002a94 <HAL_GPIO_Init+0x294>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0xae>
          break;
 8002886:	e02c      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	623b      	str	r3, [r7, #32]
          break;
 800288e:	e028      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	3304      	adds	r3, #4
 8002896:	623b      	str	r3, [r7, #32]
          break;
 8002898:	e023      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	3308      	adds	r3, #8
 80028a0:	623b      	str	r3, [r7, #32]
          break;
 80028a2:	e01e      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	330c      	adds	r3, #12
 80028aa:	623b      	str	r3, [r7, #32]
          break;
 80028ac:	e019      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028b6:	2304      	movs	r3, #4
 80028b8:	623b      	str	r3, [r7, #32]
          break;
 80028ba:	e012      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c4:	2308      	movs	r3, #8
 80028c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	611a      	str	r2, [r3, #16]
          break;
 80028ce:	e008      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028d0:	2308      	movs	r3, #8
 80028d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	615a      	str	r2, [r3, #20]
          break;
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
          break;
 80028e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2bff      	cmp	r3, #255	; 0xff
 80028e6:	d801      	bhi.n	80028ec <HAL_GPIO_Init+0xec>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	e001      	b.n	80028f0 <HAL_GPIO_Init+0xf0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2bff      	cmp	r3, #255	; 0xff
 80028f6:	d802      	bhi.n	80028fe <HAL_GPIO_Init+0xfe>
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x104>
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	3b08      	subs	r3, #8
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	210f      	movs	r1, #15
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	6a39      	ldr	r1, [r7, #32]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	431a      	orrs	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8096 	beq.w	8002a5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_GPIO_Init+0x298>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_GPIO_Init+0x298>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6193      	str	r3, [r2, #24]
 800293e:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x298>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800294a:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_GPIO_Init+0x29c>)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_GPIO_Init+0x2a0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x19e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4a      	ldr	r2, [pc, #296]	; (8002aa4 <HAL_GPIO_Init+0x2a4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x19a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a49      	ldr	r2, [pc, #292]	; (8002aa8 <HAL_GPIO_Init+0x2a8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x196>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_GPIO_Init+0x2ac>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x192>
 800298e:	2303      	movs	r3, #3
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x1a0>
 8002992:	2304      	movs	r3, #4
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x1a0>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x1a0>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x1a0>
 800299e:	2300      	movs	r3, #0
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029b0:	493a      	ldr	r1, [pc, #232]	; (8002a9c <HAL_GPIO_Init+0x29c>)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4938      	ldr	r1, [pc, #224]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d8:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4933      	ldr	r1, [pc, #204]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	492e      	ldr	r1, [pc, #184]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4929      	ldr	r1, [pc, #164]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	4924      	ldr	r1, [pc, #144]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
 8002a26:	e006      	b.n	8002a36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	491f      	ldr	r1, [pc, #124]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	491a      	ldr	r1, [pc, #104]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	4915      	ldr	r1, [pc, #84]	; (8002ab0 <HAL_GPIO_Init+0x2b0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f47f aed0 	bne.w	8002814 <HAL_GPIO_Init+0x14>
  }
}
 8002a74:	bf00      	nop
 8002a76:	372c      	adds	r7, #44	; 0x2c
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	10210000 	.word	0x10210000
 8002a84:	10110000 	.word	0x10110000
 8002a88:	10120000 	.word	0x10120000
 8002a8c:	10310000 	.word	0x10310000
 8002a90:	10320000 	.word	0x10320000
 8002a94:	10220000 	.word	0x10220000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40010c00 	.word	0x40010c00
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40011400 	.word	0x40011400
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e10f      	b.n	8002d16 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff faf6 	bl	80020fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b28:	f001 fb0e 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_I2C_Init+0x23c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d807      	bhi.n	8002b48 <HAL_I2C_Init+0x64>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_I2C_Init+0x240>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e006      	b.n	8002b56 <HAL_I2C_Init+0x72>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a77      	ldr	r2, [pc, #476]	; (8002d28 <HAL_I2C_Init+0x244>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	bf94      	ite	ls
 8002b50:	2301      	movls	r3, #1
 8002b52:	2300      	movhi	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0db      	b.n	8002d16 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_I2C_Init+0x248>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9b      	lsrs	r3, r3, #18
 8002b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_I2C_Init+0x23c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d802      	bhi.n	8002b98 <HAL_I2C_Init+0xb4>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3301      	adds	r3, #1
 8002b96:	e009      	b.n	8002bac <HAL_I2C_Init+0xc8>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_I2C_Init+0x24c>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	3301      	adds	r3, #1
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4956      	ldr	r1, [pc, #344]	; (8002d20 <HAL_I2C_Init+0x23c>)
 8002bc8:	428b      	cmp	r3, r1
 8002bca:	d80d      	bhi.n	8002be8 <HAL_I2C_Init+0x104>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1e59      	subs	r1, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	bf38      	it	cc
 8002be4:	2304      	movcc	r3, #4
 8002be6:	e04f      	b.n	8002c88 <HAL_I2C_Init+0x1a4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d111      	bne.n	8002c14 <HAL_I2C_Init+0x130>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e012      	b.n	8002c3a <HAL_I2C_Init+0x156>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e58      	subs	r0, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	0099      	lsls	r1, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x15e>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e022      	b.n	8002c88 <HAL_I2C_Init+0x1a4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10e      	bne.n	8002c68 <HAL_I2C_Init+0x184>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e58      	subs	r0, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c66:	e00f      	b.n	8002c88 <HAL_I2C_Init+0x1a4>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	0099      	lsls	r1, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6911      	ldr	r1, [r2, #16]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68d2      	ldr	r2, [r2, #12]
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	000186a0 	.word	0x000186a0
 8002d24:	001e847f 	.word	0x001e847f
 8002d28:	003d08ff 	.word	0x003d08ff
 8002d2c:	431bde83 	.word	0x431bde83
 8002d30:	10624dd3 	.word	0x10624dd3

08002d34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	460b      	mov	r3, r1
 8002d42:	817b      	strh	r3, [r7, #10]
 8002d44:	4613      	mov	r3, r2
 8002d46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff fbaa 	bl	80024a0 <HAL_GetTick>
 8002d4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 80e0 	bne.w	8002f1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	4970      	ldr	r1, [pc, #448]	; (8002f28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fc3c 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	e0d3      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Master_Transmit+0x50>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0cc      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d007      	beq.n	8002daa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2221      	movs	r2, #33	; 0x21
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dec:	8979      	ldrh	r1, [r7, #10]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 faca 	bl	800338c <I2C_MasterRequestWrite>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e08d      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e18:	e066      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fcb6 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <HAL_I2C_Master_Transmit+0x188>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6a39      	ldr	r1, [r7, #32]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fca6 	bl	8003812 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e01a      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d194      	bne.n	8002e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	00100002 	.word	0x00100002
 8002f2c:	ffff0000 	.word	0xffff0000

08002f30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	817b      	strh	r3, [r7, #10]
 8002f40:	4613      	mov	r3, r2
 8002f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff faac 	bl	80024a0 <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	f040 8213 	bne.w	800337e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	497e      	ldr	r1, [pc, #504]	; (800315c <HAL_I2C_Master_Receive+0x22c>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb3e 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e206      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_Master_Receive+0x50>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e1ff      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d007      	beq.n	8002fa6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2222      	movs	r2, #34	; 0x22
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	893a      	ldrh	r2, [r7, #8]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_I2C_Master_Receive+0x230>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa42 	bl	8003478 <I2C_MasterRequestRead>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c0      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e194      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	2b01      	cmp	r3, #1
 8003034:	d11d      	bne.n	8003072 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003046:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800306e:	b662      	cpsie	i
 8003070:	e172      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11d      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003088:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800308a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030b2:	b662      	cpsie	i
 80030b4:	e150      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030dc:	e13c      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	f200 80f5 	bhi.w	80032d2 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d123      	bne.n	8003138 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fbcd 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e13d      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003136:	e10f      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b02      	cmp	r3, #2
 800313e:	d150      	bne.n	80031e2 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	4906      	ldr	r1, [pc, #24]	; (8003164 <HAL_I2C_Master_Receive+0x234>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fa4a 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e112      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
 800315a:	bf00      	nop
 800315c:	00100002 	.word	0x00100002
 8003160:	ffff0000 	.word	0xffff0000
 8003164:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031ac:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e0:	e0ba      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	2200      	movs	r2, #0
 80031ea:	4967      	ldr	r1, [pc, #412]	; (8003388 <HAL_I2C_Master_Receive+0x458>)
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f9f9 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0c1      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800320c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2200      	movs	r2, #0
 8003248:	494f      	ldr	r1, [pc, #316]	; (8003388 <HAL_I2C_Master_Receive+0x458>)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f9ca 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e092      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800329c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e042      	b.n	8003358 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fadc 	bl	8003894 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e04c      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d118      	bne.n	8003358 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aebe 	bne.w	80030de <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010004 	.word	0x00010004

0800338c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d003      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d107      	bne.n	80033e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f8f9 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e035      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003404:	d108      	bne.n	8003418 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e01b      	b.n	8003450 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	11db      	asrs	r3, r3, #7
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f063 030f 	orn	r3, r3, #15
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <I2C_MasterRequestWrite+0xe4>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f92b 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e010      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <I2C_MasterRequestWrite+0xe8>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f91b 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	00010008 	.word	0x00010008
 8003474:	00010002 	.word	0x00010002

08003478 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800349c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d006      	beq.n	80034b2 <I2C_MasterRequestRead+0x3a>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d003      	beq.n	80034b2 <I2C_MasterRequestRead+0x3a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e00b      	b.n	80034dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b11      	cmp	r3, #17
 80034ca:	d107      	bne.n	80034dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f87b 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e06d      	b.n	80035d4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e053      	b.n	80035bc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	492a      	ldr	r1, [pc, #168]	; (80035dc <I2C_MasterRequestRead+0x164>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8ad 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e048      	b.n	80035d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4923      	ldr	r1, [pc, #140]	; (80035e0 <I2C_MasterRequestRead+0x168>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f89d 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e038      	b.n	80035d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f825 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e017      	b.n	80035d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	11db      	asrs	r3, r3, #7
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0306 	and.w	r3, r3, #6
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f063 030e 	orn	r3, r3, #14
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4907      	ldr	r1, [pc, #28]	; (80035e0 <I2C_MasterRequestRead+0x168>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f865 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00010008 	.word	0x00010008
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e025      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d021      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe ff4f 	bl	80024a0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e023      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	e00c      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0b6      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a0:	e051      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d123      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e046      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fecd 	bl	80024a0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e020      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10c      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e00b      	b.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d18d      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8ce 	bl	8003940 <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d021      	beq.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fe73 	bl	80024a0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d1ca      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f88d 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d021      	beq.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe fe32 	bl	80024a0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d1ca      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a0:	e042      	b.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d119      	bne.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e029      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fe fddc 	bl	80024a0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d1b5      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d11b      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e26c      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8087 	beq.w	8003aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039bc:	4b92      	ldr	r3, [pc, #584]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c8:	4b8f      	ldr	r3, [pc, #572]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d112      	bne.n	80039fa <HAL_RCC_OscConfig+0x5e>
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e0:	d10b      	bne.n	80039fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e2:	4b89      	ldr	r3, [pc, #548]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d06c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x12c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d168      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e246      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x76>
 8003a04:	4b80      	ldr	r3, [pc, #512]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a7f      	ldr	r2, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e02e      	b.n	8003a70 <HAL_RCC_OscConfig+0xd4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b78      	ldr	r3, [pc, #480]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xd4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0xbc>
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a71      	ldr	r2, [pc, #452]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b6f      	ldr	r3, [pc, #444]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6e      	ldr	r2, [pc, #440]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xd4>
 8003a58:	4b6b      	ldr	r3, [pc, #428]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a67      	ldr	r2, [pc, #412]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe fd12 	bl	80024a0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fd0e 	bl	80024a0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1fa      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe4>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fcfe 	bl	80024a0 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fcfa 	bl	80024a0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1e6      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x10c>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ae2:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d11c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x18c>
 8003aee:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x176>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1ba      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4939      	ldr	r1, [pc, #228]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	e03a      	b.n	8003b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCC_OscConfig+0x270>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fcb3 	bl	80024a0 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fe fcaf 	bl	80024a0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e19b      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4927      	ldr	r1, [pc, #156]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	e015      	b.n	8003b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <HAL_RCC_OscConfig+0x270>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fc92 	bl	80024a0 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe fc8e 	bl	80024a0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e17a      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d03a      	beq.n	8003c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d019      	beq.n	8003be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fc72 	bl	80024a0 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fe fc6e 	bl	80024a0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e15a      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f000 fada 	bl	8004198 <RCC_Delay>
 8003be4:	e01c      	b.n	8003c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_RCC_OscConfig+0x274>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fc58 	bl	80024a0 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf2:	e00f      	b.n	8003c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fc54 	bl	80024a0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d908      	bls.n	8003c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e140      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	42420000 	.word	0x42420000
 8003c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c14:	4b9e      	ldr	r3, [pc, #632]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e9      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80a6 	beq.w	8003d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c32:	4b97      	ldr	r3, [pc, #604]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	4b94      	ldr	r3, [pc, #592]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4a93      	ldr	r2, [pc, #588]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	61d3      	str	r3, [r2, #28]
 8003c4a:	4b91      	ldr	r3, [pc, #580]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b8e      	ldr	r3, [pc, #568]	; (8003e94 <HAL_RCC_OscConfig+0x4f8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a8a      	ldr	r2, [pc, #552]	; (8003e94 <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fe fc15 	bl	80024a0 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fe fc11 	bl	80024a0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	; 0x64
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0fd      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x4f8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x312>
 8003ca0:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a7a      	ldr	r2, [pc, #488]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	e02d      	b.n	8003d0a <HAL_RCC_OscConfig+0x36e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x334>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	6213      	str	r3, [r2, #32]
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	4a72      	ldr	r2, [pc, #456]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cc8:	f023 0304 	bic.w	r3, r3, #4
 8003ccc:	6213      	str	r3, [r2, #32]
 8003cce:	e01c      	b.n	8003d0a <HAL_RCC_OscConfig+0x36e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x356>
 8003cd8:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4a6c      	ldr	r2, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	f043 0304 	orr.w	r3, r3, #4
 8003ce2:	6213      	str	r3, [r2, #32]
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a69      	ldr	r2, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	e00b      	b.n	8003d0a <HAL_RCC_OscConfig+0x36e>
 8003cf2:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a66      	ldr	r2, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6213      	str	r3, [r2, #32]
 8003cfe:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4a63      	ldr	r2, [pc, #396]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	f023 0304 	bic.w	r3, r3, #4
 8003d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d015      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fbc5 	bl	80024a0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe fbc1 	bl	80024a0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0ab      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCC_OscConfig+0x37e>
 8003d3c:	e014      	b.n	8003d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fbaf 	bl	80024a0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fe fbab 	bl	80024a0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e095      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ee      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8081 	beq.w	8003e86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d061      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d146      	bne.n	8003e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_OscConfig+0x4fc>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fb7f 	bl	80024a0 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fb7b 	bl	80024a0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e067      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	492d      	ldr	r1, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a19      	ldr	r1, [r3, #32]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	430b      	orrs	r3, r1
 8003df2:	4927      	ldr	r1, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x4fc>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fe fb4f 	bl	80024a0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e06:	f7fe fb4b 	bl	80024a0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e037      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x46a>
 8003e24:	e02f      	b.n	8003e86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_RCC_OscConfig+0x4fc>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fb38 	bl	80024a0 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe fb34 	bl	80024a0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e020      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x498>
 8003e52:	e018      	b.n	8003e86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e013      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x4f4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42420060 	.word	0x42420060

08003e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d0      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d040      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e073      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4936      	ldr	r1, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fe fa88 	bl	80024a0 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fe fa84 	bl	80024a0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e053      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4922      	ldr	r1, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4601      	mov	r1, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	fa21 f303 	lsr.w	r3, r1, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1cc>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f9e6 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40022000 	.word	0x40022000
 8004060:	40021000 	.word	0x40021000
 8004064:	08006f28 	.word	0x08006f28
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b490      	push	{r4, r7}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004078:	1d3c      	adds	r4, r7, #4
 800407a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x40>
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x46>
 80040ae:	e02d      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b2:	623b      	str	r3, [r7, #32]
      break;
 80040b4:	e02d      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040c2:	4413      	add	r3, r2
 80040c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c5b      	lsrs	r3, r3, #17
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040e2:	4413      	add	r3, r2
 80040e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040ee:	fb02 f203 	mul.w	r2, r2, r3
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	e004      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	623b      	str	r3, [r7, #32]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 800410e:	623b      	str	r3, [r7, #32]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	6a3b      	ldr	r3, [r7, #32]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc90      	pop	{r4, r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	08006f14 	.word	0x08006f14
 8004124:	08006f24 	.word	0x08006f24
 8004128:	40021000 	.word	0x40021000
 800412c:	007a1200 	.word	0x007a1200
 8004130:	003d0900 	.word	0x003d0900

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_RCC_GetHCLKFreq+0x10>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff2 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004150:	4601      	mov	r1, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5cd3      	ldrb	r3, [r2, r3]
 8004160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08006f38 	.word	0x08006f38

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffde 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004178:	4601      	mov	r1, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4a03      	ldr	r2, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	08006f38 	.word	0x08006f38

08004198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <RCC_Delay+0x34>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <RCC_Delay+0x38>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a5b      	lsrs	r3, r3, #9
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041b4:	bf00      	nop
  }
  while (Delay --);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	60fa      	str	r2, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f9      	bne.n	80041b4 <RCC_Delay+0x1c>
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000000 	.word	0x20000000
 80041d0:	10624dd3 	.word	0x10624dd3

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e01d      	b.n	8004222 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd ffbc 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fa18 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d007      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0202 	mvn.w	r2, #2
 800429c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9ad 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9a0 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f9af 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0204 	mvn.w	r2, #4
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f983 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f976 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f985 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0208 	mvn.w	r2, #8
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f959 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f94c 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f95b 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b10      	cmp	r3, #16
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0210 	mvn.w	r2, #16
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2208      	movs	r2, #8
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f92f 	bl	8004612 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f922 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f931 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0201 	mvn.w	r2, #1
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8fd 	bl	80045ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa59 	bl	80048d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8f5 	bl	8004636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b20      	cmp	r3, #32
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0220 	mvn.w	r2, #32
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa24 	bl	80048c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIM_ConfigClockSource+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e0a6      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x166>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d067      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x120>
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d80b      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x6c>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d073      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x140>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d802      	bhi.n	80044e2 <HAL_TIM_ConfigClockSource+0x62>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d06f      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044e0:	e078      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d06c      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x140>
 80044e6:	2b30      	cmp	r3, #48	; 0x30
 80044e8:	d06a      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044ea:	e073      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044ec:	2b70      	cmp	r3, #112	; 0x70
 80044ee:	d00d      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x8c>
 80044f0:	2b70      	cmp	r3, #112	; 0x70
 80044f2:	d804      	bhi.n	80044fe <HAL_TIM_ConfigClockSource+0x7e>
 80044f4:	2b50      	cmp	r3, #80	; 0x50
 80044f6:	d033      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0xe0>
 80044f8:	2b60      	cmp	r3, #96	; 0x60
 80044fa:	d041      	beq.n	8004580 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044fc:	e06a      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	d066      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x152>
 8004504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004508:	d017      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800450a:	e063      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f000 f96d 	bl	80047fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800452e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]
      break;
 8004538:	e04c      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6899      	ldr	r1, [r3, #8]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f000 f956 	bl	80047fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455c:	609a      	str	r2, [r3, #8]
      break;
 800455e:	e039      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	461a      	mov	r2, r3
 800456e:	f000 f8cd 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2150      	movs	r1, #80	; 0x50
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f924 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 800457e:	e029      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	461a      	mov	r2, r3
 800458e:	f000 f8eb 	bl	8004768 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2160      	movs	r1, #96	; 0x60
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f914 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 800459e:	e019      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	461a      	mov	r2, r3
 80045ae:	f000 f8ad 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f904 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80045be:	e009      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 f8fb 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e000      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d007      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a26      	ldr	r2, [pc, #152]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a25      	ldr	r2, [pc, #148]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d007      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a07      	ldr	r2, [pc, #28]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800

0800470c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 030a 	bic.w	r3, r3, #10
 8004748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f023 0210 	bic.w	r2, r3, #16
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	031b      	lsls	r3, r3, #12
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f043 0307 	orr.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b087      	sub	sp, #28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004814:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	431a      	orrs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e032      	b.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004888:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e03f      	b.n	8004976 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fd fc58 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fbe7 	bl	80050fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b088      	sub	sp, #32
 8004982:	af02      	add	r7, sp, #8
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 8083 	bne.w	8004aa6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Transmit+0x2e>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e07b      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_UART_Transmit+0x40>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e074      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2221      	movs	r2, #33	; 0x21
 80049d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049d4:	f7fd fd64 	bl	80024a0 <HAL_GetTick>
 80049d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049e6:	e042      	b.n	8004a6e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d122      	bne.n	8004a46 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fa0d 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e046      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	e017      	b.n	8004a6e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e013      	b.n	8004a6e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9ea 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e023      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1b7      	bne.n	80049e8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f9d1 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00a      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	f040 8090 	bne.w	8004bf2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_UART_Receive+0x2e>
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e088      	b.n	8004bf4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_UART_Receive+0x40>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e081      	b.n	8004bf4 <HAL_UART_Receive+0x144>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2222      	movs	r2, #34	; 0x22
 8004b02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b06:	f7fd fccb 	bl	80024a0 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b18:	e05c      	b.n	8004bd4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b30:	d12b      	bne.n	8004b8a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f974 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e053      	b.n	8004bf4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10c      	bne.n	8004b72 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e030      	b.n	8004bd4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	e024      	b.n	8004bd4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2120      	movs	r1, #32
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f948 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e027      	b.n	8004bf4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	60ba      	str	r2, [r7, #8]
 8004bb8:	b2ca      	uxtb	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e00a      	b.n	8004bd4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d19d      	bne.n	8004b1a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_UART_IRQHandler+0x52>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9d7 	bl	8004ffa <UART_Receive_IT>
      return;
 8004c4c:	e0cc      	b.n	8004de8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80ab 	beq.w	8004dac <HAL_UART_IRQHandler+0x1b0>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_UART_IRQHandler+0x70>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80a0 	beq.w	8004dac <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_UART_IRQHandler+0x90>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	f043 0201 	orr.w	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_UART_IRQHandler+0xb0>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	f043 0202 	orr.w	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_UART_IRQHandler+0xd0>
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	f043 0204 	orr.w	r2, r3, #4
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_UART_IRQHandler+0xf0>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	f043 0208 	orr.w	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d078      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <HAL_UART_IRQHandler+0x112>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f976 	bl	8004ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <HAL_UART_IRQHandler+0x13a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d031      	beq.n	8004d9a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8c1 	bl	8004ebe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d023      	beq.n	8004d92 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d013      	beq.n	8004d8a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <HAL_UART_IRQHandler+0x1f4>)
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fcd0 	bl	8002714 <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	e00e      	b.n	8004da8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f844 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e00a      	b.n	8004da8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f840 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e006      	b.n	8004da8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f83c 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004da6:	e01e      	b.n	8004de6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	bf00      	nop
    return;
 8004daa:	e01c      	b.n	8004de6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x1cc>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8ad 	bl	8004f20 <UART_Transmit_IT>
    return;
 8004dc6:	e00f      	b.n	8004de8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_UART_IRQHandler+0x1ec>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8f4 	bl	8004fca <UART_EndTransmit_IT>
    return;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004de6:	bf00      	nop
  }
}
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	08004ef9 	.word	0x08004ef9

08004df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e02c      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d028      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4a:	f7fd fb29 	bl	80024a0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d21d      	bcs.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00f      	b.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d0c3      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff ff80 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d144      	bne.n	8004fbe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3c:	d11a      	bne.n	8004f74 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f52:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]
 8004f66:	e00e      	b.n	8004f86 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]
 8004f72:	e008      	b.n	8004f86 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6211      	str	r1, [r2, #32]
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4619      	mov	r1, r3
 8004f94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10f      	bne.n	8004fba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff02 	bl	8004df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b22      	cmp	r3, #34	; 0x22
 800500c:	d171      	bne.n	80050f2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	d123      	bne.n	8005060 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
 8005042:	e029      	b.n	8005098 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	b29b      	uxth	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	629a      	str	r2, [r3, #40]	; 0x28
 800505e:	e01b      	b.n	8005098 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6858      	ldr	r0, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6291      	str	r1, [r2, #40]	; 0x28
 8005078:	b2c2      	uxtb	r2, r0
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e00c      	b.n	8005098 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	1c58      	adds	r0, r3, #1
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6288      	str	r0, [r1, #40]	; 0x28
 8005090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d120      	bne.n	80050ee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0220 	bic.w	r2, r2, #32
 80050ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fe8e 	bl	8004e06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e002      	b.n	80050f4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e000      	b.n	80050f4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
  }
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005136:	f023 030c 	bic.w	r3, r3, #12
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	430b      	orrs	r3, r1
 8005142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a52      	ldr	r2, [pc, #328]	; (80052a8 <UART_SetConfig+0x1ac>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d14e      	bne.n	8005202 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005164:	f7ff f804 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005168:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <UART_SetConfig+0x1b0>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	0119      	lsls	r1, r3, #4
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009a      	lsls	r2, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	4b42      	ldr	r3, [pc, #264]	; (80052ac <UART_SetConfig+0x1b0>)
 80051a2:	fba3 0302 	umull	r0, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2064      	movs	r0, #100	; 0x64
 80051aa:	fb00 f303 	mul.w	r3, r0, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	; 0x32
 80051b4:	4a3d      	ldr	r2, [pc, #244]	; (80052ac <UART_SetConfig+0x1b0>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	4419      	add	r1, r3
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009a      	lsls	r2, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d8:	4b34      	ldr	r3, [pc, #208]	; (80052ac <UART_SetConfig+0x1b0>)
 80051da:	fba3 0302 	umull	r0, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2064      	movs	r0, #100	; 0x64
 80051e2:	fb00 f303 	mul.w	r3, r0, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	; 0x32
 80051ec:	4a2f      	ldr	r2, [pc, #188]	; (80052ac <UART_SetConfig+0x1b0>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	440a      	add	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005200:	e04d      	b.n	800529e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005202:	f7fe ffa1 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8005206:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009a      	lsls	r2, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	4a23      	ldr	r2, [pc, #140]	; (80052ac <UART_SetConfig+0x1b0>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	0119      	lsls	r1, r3, #4
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009a      	lsls	r2, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	fbb2 f2f3 	udiv	r2, r2, r3
 800523e:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <UART_SetConfig+0x1b0>)
 8005240:	fba3 0302 	umull	r0, r3, r3, r2
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	2064      	movs	r0, #100	; 0x64
 8005248:	fb00 f303 	mul.w	r3, r0, r3
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	3332      	adds	r3, #50	; 0x32
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <UART_SetConfig+0x1b0>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525e:	4419      	add	r1, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009a      	lsls	r2, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	fbb2 f2f3 	udiv	r2, r2, r3
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <UART_SetConfig+0x1b0>)
 8005278:	fba3 0302 	umull	r0, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2064      	movs	r0, #100	; 0x64
 8005280:	fb00 f303 	mul.w	r3, r0, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <UART_SetConfig+0x1b0>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	440a      	add	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40013800 	.word	0x40013800
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <__errno>:
 80052b0:	4b01      	ldr	r3, [pc, #4]	; (80052b8 <__errno+0x8>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	2500      	movs	r5, #0
 80052c0:	4e0c      	ldr	r6, [pc, #48]	; (80052f4 <__libc_init_array+0x38>)
 80052c2:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c4:	1ba4      	subs	r4, r4, r6
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	42a5      	cmp	r5, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	f001 fe06 	bl	8006edc <_init>
 80052d0:	2500      	movs	r5, #0
 80052d2:	4e0a      	ldr	r6, [pc, #40]	; (80052fc <__libc_init_array+0x40>)
 80052d4:	4c0a      	ldr	r4, [pc, #40]	; (8005300 <__libc_init_array+0x44>)
 80052d6:	1ba4      	subs	r4, r4, r6
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	42a5      	cmp	r5, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052e4:	4798      	blx	r3
 80052e6:	3501      	adds	r5, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ee:	4798      	blx	r3
 80052f0:	3501      	adds	r5, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08006fb0 	.word	0x08006fb0
 80052f8:	08006fb0 	.word	0x08006fb0
 80052fc:	08006fb0 	.word	0x08006fb0
 8005300:	08006fb4 	.word	0x08006fb4

08005304 <memset>:
 8005304:	4603      	mov	r3, r0
 8005306:	4402      	add	r2, r0
 8005308:	4293      	cmp	r3, r2
 800530a:	d100      	bne.n	800530e <memset+0xa>
 800530c:	4770      	bx	lr
 800530e:	f803 1b01 	strb.w	r1, [r3], #1
 8005312:	e7f9      	b.n	8005308 <memset+0x4>

08005314 <strcpy>:
 8005314:	4603      	mov	r3, r0
 8005316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531a:	f803 2b01 	strb.w	r2, [r3], #1
 800531e:	2a00      	cmp	r2, #0
 8005320:	d1f9      	bne.n	8005316 <strcpy+0x2>
 8005322:	4770      	bx	lr

08005324 <pow>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	b08f      	sub	sp, #60	; 0x3c
 800532a:	461d      	mov	r5, r3
 800532c:	4680      	mov	r8, r0
 800532e:	4689      	mov	r9, r1
 8005330:	4614      	mov	r4, r2
 8005332:	f000 fab5 	bl	80058a0 <__ieee754_pow>
 8005336:	4fa1      	ldr	r7, [pc, #644]	; (80055bc <pow+0x298>)
 8005338:	e9cd 0100 	strd	r0, r1, [sp]
 800533c:	f997 3000 	ldrsb.w	r3, [r7]
 8005340:	463e      	mov	r6, r7
 8005342:	9302      	str	r3, [sp, #8]
 8005344:	3301      	adds	r3, #1
 8005346:	d05f      	beq.n	8005408 <pow+0xe4>
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fb fb5c 	bl	8000a0c <__aeabi_dcmpun>
 8005354:	4682      	mov	sl, r0
 8005356:	2800      	cmp	r0, #0
 8005358:	d156      	bne.n	8005408 <pow+0xe4>
 800535a:	4642      	mov	r2, r8
 800535c:	464b      	mov	r3, r9
 800535e:	4640      	mov	r0, r8
 8005360:	4649      	mov	r1, r9
 8005362:	f7fb fb53 	bl	8000a0c <__aeabi_dcmpun>
 8005366:	9003      	str	r0, [sp, #12]
 8005368:	b1e8      	cbz	r0, 80053a6 <pow+0x82>
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	4620      	mov	r0, r4
 8005370:	4629      	mov	r1, r5
 8005372:	f7fb fb19 	bl	80009a8 <__aeabi_dcmpeq>
 8005376:	2800      	cmp	r0, #0
 8005378:	d046      	beq.n	8005408 <pow+0xe4>
 800537a:	2301      	movs	r3, #1
 800537c:	2200      	movs	r2, #0
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	4b8f      	ldr	r3, [pc, #572]	; (80055c0 <pow+0x29c>)
 8005382:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005386:	9305      	str	r3, [sp, #20]
 8005388:	4b8e      	ldr	r3, [pc, #568]	; (80055c4 <pow+0x2a0>)
 800538a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800538e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005392:	9b02      	ldr	r3, [sp, #8]
 8005394:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d031      	beq.n	8005400 <pow+0xdc>
 800539c:	a804      	add	r0, sp, #16
 800539e:	f001 fbde 	bl	8006b5e <matherr>
 80053a2:	bb38      	cbnz	r0, 80053f4 <pow+0xd0>
 80053a4:	e058      	b.n	8005458 <pow+0x134>
 80053a6:	f04f 0a00 	mov.w	sl, #0
 80053aa:	f04f 0b00 	mov.w	fp, #0
 80053ae:	4652      	mov	r2, sl
 80053b0:	465b      	mov	r3, fp
 80053b2:	4640      	mov	r0, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	f7fb faf7 	bl	80009a8 <__aeabi_dcmpeq>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d051      	beq.n	8005462 <pow+0x13e>
 80053be:	4652      	mov	r2, sl
 80053c0:	465b      	mov	r3, fp
 80053c2:	4620      	mov	r0, r4
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7fb faef 	bl	80009a8 <__aeabi_dcmpeq>
 80053ca:	4606      	mov	r6, r0
 80053cc:	b308      	cbz	r0, 8005412 <pow+0xee>
 80053ce:	2301      	movs	r3, #1
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <pow+0x29c>)
 80053d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80053d8:	9305      	str	r3, [sp, #20]
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80053e0:	930c      	str	r3, [sp, #48]	; 0x30
 80053e2:	9b02      	ldr	r3, [sp, #8]
 80053e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0d7      	beq.n	800539c <pow+0x78>
 80053ec:	2200      	movs	r2, #0
 80053ee:	4b75      	ldr	r3, [pc, #468]	; (80055c4 <pow+0x2a0>)
 80053f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80053f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053f6:	b11b      	cbz	r3, 8005400 <pow+0xdc>
 80053f8:	f7ff ff5a 	bl	80052b0 <__errno>
 80053fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053fe:	6003      	str	r3, [r0, #0]
 8005400:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005404:	e9cd 3400 	strd	r3, r4, [sp]
 8005408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800540c:	b00f      	add	sp, #60	; 0x3c
 800540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f001 fb9c 	bl	8006b52 <finite>
 800541a:	2800      	cmp	r0, #0
 800541c:	d0f4      	beq.n	8005408 <pow+0xe4>
 800541e:	4652      	mov	r2, sl
 8005420:	465b      	mov	r3, fp
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fb fac9 	bl	80009bc <__aeabi_dcmplt>
 800542a:	2800      	cmp	r0, #0
 800542c:	d0ec      	beq.n	8005408 <pow+0xe4>
 800542e:	2301      	movs	r3, #1
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	4b63      	ldr	r3, [pc, #396]	; (80055c0 <pow+0x29c>)
 8005434:	960c      	str	r6, [sp, #48]	; 0x30
 8005436:	9305      	str	r3, [sp, #20]
 8005438:	f997 3000 	ldrsb.w	r3, [r7]
 800543c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005440:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005444:	b913      	cbnz	r3, 800544c <pow+0x128>
 8005446:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800544a:	e7a7      	b.n	800539c <pow+0x78>
 800544c:	2000      	movs	r0, #0
 800544e:	495e      	ldr	r1, [pc, #376]	; (80055c8 <pow+0x2a4>)
 8005450:	2b02      	cmp	r3, #2
 8005452:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005456:	d1a1      	bne.n	800539c <pow+0x78>
 8005458:	f7ff ff2a 	bl	80052b0 <__errno>
 800545c:	2321      	movs	r3, #33	; 0x21
 800545e:	6003      	str	r3, [r0, #0]
 8005460:	e7c8      	b.n	80053f4 <pow+0xd0>
 8005462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005466:	f001 fb74 	bl	8006b52 <finite>
 800546a:	9002      	str	r0, [sp, #8]
 800546c:	2800      	cmp	r0, #0
 800546e:	d177      	bne.n	8005560 <pow+0x23c>
 8005470:	4640      	mov	r0, r8
 8005472:	4649      	mov	r1, r9
 8005474:	f001 fb6d 	bl	8006b52 <finite>
 8005478:	2800      	cmp	r0, #0
 800547a:	d071      	beq.n	8005560 <pow+0x23c>
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f001 fb67 	bl	8006b52 <finite>
 8005484:	2800      	cmp	r0, #0
 8005486:	d06b      	beq.n	8005560 <pow+0x23c>
 8005488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fb fabc 	bl	8000a0c <__aeabi_dcmpun>
 8005494:	f997 7000 	ldrsb.w	r7, [r7]
 8005498:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <pow+0x29c>)
 800549a:	b1a0      	cbz	r0, 80054c6 <pow+0x1a2>
 800549c:	2201      	movs	r2, #1
 800549e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80054a8:	930c      	str	r3, [sp, #48]	; 0x30
 80054aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	d0c9      	beq.n	8005446 <pow+0x122>
 80054b2:	4652      	mov	r2, sl
 80054b4:	465b      	mov	r3, fp
 80054b6:	4650      	mov	r0, sl
 80054b8:	4659      	mov	r1, fp
 80054ba:	f7fb f937 	bl	800072c <__aeabi_ddiv>
 80054be:	2f02      	cmp	r7, #2
 80054c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054c4:	e7c7      	b.n	8005456 <pow+0x132>
 80054c6:	2203      	movs	r2, #3
 80054c8:	900c      	str	r0, [sp, #48]	; 0x30
 80054ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	2200      	movs	r2, #0
 80054d4:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <pow+0x2a8>)
 80054d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80054da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80054de:	f7fa fffb 	bl	80004d8 <__aeabi_dmul>
 80054e2:	4604      	mov	r4, r0
 80054e4:	460d      	mov	r5, r1
 80054e6:	bb17      	cbnz	r7, 800552e <pow+0x20a>
 80054e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80054ec:	4b38      	ldr	r3, [pc, #224]	; (80055d0 <pow+0x2ac>)
 80054ee:	4640      	mov	r0, r8
 80054f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054f4:	4649      	mov	r1, r9
 80054f6:	4652      	mov	r2, sl
 80054f8:	465b      	mov	r3, fp
 80054fa:	f7fb fa5f 	bl	80009bc <__aeabi_dcmplt>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d054      	beq.n	80055ac <pow+0x288>
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f001 fb33 	bl	8006b70 <rint>
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f7fb fa4b 	bl	80009a8 <__aeabi_dcmpeq>
 8005512:	b920      	cbnz	r0, 800551e <pow+0x1fa>
 8005514:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005518:	4b2e      	ldr	r3, [pc, #184]	; (80055d4 <pow+0x2b0>)
 800551a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800551e:	f996 3000 	ldrsb.w	r3, [r6]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d142      	bne.n	80055ac <pow+0x288>
 8005526:	f7ff fec3 	bl	80052b0 <__errno>
 800552a:	2322      	movs	r3, #34	; 0x22
 800552c:	e797      	b.n	800545e <pow+0x13a>
 800552e:	2200      	movs	r2, #0
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <pow+0x2b4>)
 8005532:	4640      	mov	r0, r8
 8005534:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005538:	4649      	mov	r1, r9
 800553a:	4652      	mov	r2, sl
 800553c:	465b      	mov	r3, fp
 800553e:	f7fb fa3d 	bl	80009bc <__aeabi_dcmplt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d0eb      	beq.n	800551e <pow+0x1fa>
 8005546:	4620      	mov	r0, r4
 8005548:	4629      	mov	r1, r5
 800554a:	f001 fb11 	bl	8006b70 <rint>
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	f7fb fa29 	bl	80009a8 <__aeabi_dcmpeq>
 8005556:	2800      	cmp	r0, #0
 8005558:	d1e1      	bne.n	800551e <pow+0x1fa>
 800555a:	2200      	movs	r2, #0
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <pow+0x2a4>)
 800555e:	e7dc      	b.n	800551a <pow+0x1f6>
 8005560:	2200      	movs	r2, #0
 8005562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005566:	2300      	movs	r3, #0
 8005568:	f7fb fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f af4b 	beq.w	8005408 <pow+0xe4>
 8005572:	4640      	mov	r0, r8
 8005574:	4649      	mov	r1, r9
 8005576:	f001 faec 	bl	8006b52 <finite>
 800557a:	2800      	cmp	r0, #0
 800557c:	f43f af44 	beq.w	8005408 <pow+0xe4>
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f001 fae5 	bl	8006b52 <finite>
 8005588:	2800      	cmp	r0, #0
 800558a:	f43f af3d 	beq.w	8005408 <pow+0xe4>
 800558e:	2304      	movs	r3, #4
 8005590:	9304      	str	r3, [sp, #16]
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <pow+0x29c>)
 8005594:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005598:	9305      	str	r3, [sp, #20]
 800559a:	2300      	movs	r3, #0
 800559c:	2400      	movs	r4, #0
 800559e:	930c      	str	r3, [sp, #48]	; 0x30
 80055a0:	2300      	movs	r3, #0
 80055a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80055a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80055aa:	e7b8      	b.n	800551e <pow+0x1fa>
 80055ac:	a804      	add	r0, sp, #16
 80055ae:	f001 fad6 	bl	8006b5e <matherr>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f47f af1e 	bne.w	80053f4 <pow+0xd0>
 80055b8:	e7b5      	b.n	8005526 <pow+0x202>
 80055ba:	bf00      	nop
 80055bc:	20000070 	.word	0x20000070
 80055c0:	08006f40 	.word	0x08006f40
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	fff00000 	.word	0xfff00000
 80055cc:	3fe00000 	.word	0x3fe00000
 80055d0:	47efffff 	.word	0x47efffff
 80055d4:	c7efffff 	.word	0xc7efffff
 80055d8:	7ff00000 	.word	0x7ff00000

080055dc <powf>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	b08d      	sub	sp, #52	; 0x34
 80055e2:	4605      	mov	r5, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	f000 ff11 	bl	800640c <__ieee754_powf>
 80055ea:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8005898 <powf+0x2bc>
 80055ee:	4606      	mov	r6, r0
 80055f0:	f998 9000 	ldrsb.w	r9, [r8]
 80055f4:	4647      	mov	r7, r8
 80055f6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80055fa:	d060      	beq.n	80056be <powf+0xe2>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb fd66 	bl	80010d0 <__aeabi_fcmpun>
 8005604:	4683      	mov	fp, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	d159      	bne.n	80056be <powf+0xe2>
 800560a:	4629      	mov	r1, r5
 800560c:	4628      	mov	r0, r5
 800560e:	f7fb fd5f 	bl	80010d0 <__aeabi_fcmpun>
 8005612:	2100      	movs	r1, #0
 8005614:	4682      	mov	sl, r0
 8005616:	b300      	cbz	r0, 800565a <powf+0x7e>
 8005618:	4620      	mov	r0, r4
 800561a:	f7fb fd27 	bl	800106c <__aeabi_fcmpeq>
 800561e:	2800      	cmp	r0, #0
 8005620:	d04d      	beq.n	80056be <powf+0xe2>
 8005622:	2301      	movs	r3, #1
 8005624:	9302      	str	r3, [sp, #8]
 8005626:	4b96      	ldr	r3, [pc, #600]	; (8005880 <powf+0x2a4>)
 8005628:	4628      	mov	r0, r5
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005630:	f7fa fefa 	bl	8000428 <__aeabi_f2d>
 8005634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005638:	4620      	mov	r0, r4
 800563a:	f7fa fef5 	bl	8000428 <__aeabi_f2d>
 800563e:	2200      	movs	r2, #0
 8005640:	4b90      	ldr	r3, [pc, #576]	; (8005884 <powf+0x2a8>)
 8005642:	f1b9 0f02 	cmp.w	r9, #2
 8005646:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800564a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800564e:	d031      	beq.n	80056b4 <powf+0xd8>
 8005650:	a802      	add	r0, sp, #8
 8005652:	f001 fa84 	bl	8006b5e <matherr>
 8005656:	bb38      	cbnz	r0, 80056a8 <powf+0xcc>
 8005658:	e05d      	b.n	8005716 <powf+0x13a>
 800565a:	4628      	mov	r0, r5
 800565c:	f7fb fd06 	bl	800106c <__aeabi_fcmpeq>
 8005660:	2800      	cmp	r0, #0
 8005662:	d05d      	beq.n	8005720 <powf+0x144>
 8005664:	2100      	movs	r1, #0
 8005666:	4620      	mov	r0, r4
 8005668:	f7fb fd00 	bl	800106c <__aeabi_fcmpeq>
 800566c:	4607      	mov	r7, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d029      	beq.n	80056c6 <powf+0xea>
 8005672:	2301      	movs	r3, #1
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	4b82      	ldr	r3, [pc, #520]	; (8005880 <powf+0x2a4>)
 8005678:	4628      	mov	r0, r5
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005680:	f7fa fed2 	bl	8000428 <__aeabi_f2d>
 8005684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005688:	4620      	mov	r0, r4
 800568a:	f7fa fecd 	bl	8000428 <__aeabi_f2d>
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005696:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	d0d7      	beq.n	8005650 <powf+0x74>
 80056a0:	2200      	movs	r2, #0
 80056a2:	4b78      	ldr	r3, [pc, #480]	; (8005884 <powf+0x2a8>)
 80056a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056aa:	b11b      	cbz	r3, 80056b4 <powf+0xd8>
 80056ac:	f7ff fe00 	bl	80052b0 <__errno>
 80056b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b2:	6003      	str	r3, [r0, #0]
 80056b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056b8:	f7fb f9e6 	bl	8000a88 <__aeabi_d2f>
 80056bc:	4606      	mov	r6, r0
 80056be:	4630      	mov	r0, r6
 80056c0:	b00d      	add	sp, #52	; 0x34
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	4620      	mov	r0, r4
 80056c8:	f001 fb4f 	bl	8006d6a <finitef>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d0f6      	beq.n	80056be <powf+0xe2>
 80056d0:	2100      	movs	r1, #0
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7fb fcd4 	bl	8001080 <__aeabi_fcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0f0      	beq.n	80056be <powf+0xe2>
 80056dc:	2301      	movs	r3, #1
 80056de:	9302      	str	r3, [sp, #8]
 80056e0:	4b67      	ldr	r3, [pc, #412]	; (8005880 <powf+0x2a4>)
 80056e2:	4628      	mov	r0, r5
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	970a      	str	r7, [sp, #40]	; 0x28
 80056e8:	f7fa fe9e 	bl	8000428 <__aeabi_f2d>
 80056ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fa fe99 	bl	8000428 <__aeabi_f2d>
 80056f6:	f998 3000 	ldrsb.w	r3, [r8]
 80056fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056fe:	b923      	cbnz	r3, 800570a <powf+0x12e>
 8005700:	2200      	movs	r2, #0
 8005702:	2300      	movs	r3, #0
 8005704:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005708:	e7a2      	b.n	8005650 <powf+0x74>
 800570a:	2000      	movs	r0, #0
 800570c:	495e      	ldr	r1, [pc, #376]	; (8005888 <powf+0x2ac>)
 800570e:	2b02      	cmp	r3, #2
 8005710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005714:	d19c      	bne.n	8005650 <powf+0x74>
 8005716:	f7ff fdcb 	bl	80052b0 <__errno>
 800571a:	2321      	movs	r3, #33	; 0x21
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	e7c3      	b.n	80056a8 <powf+0xcc>
 8005720:	4630      	mov	r0, r6
 8005722:	f001 fb22 	bl	8006d6a <finitef>
 8005726:	4681      	mov	r9, r0
 8005728:	2800      	cmp	r0, #0
 800572a:	d17b      	bne.n	8005824 <powf+0x248>
 800572c:	4628      	mov	r0, r5
 800572e:	f001 fb1c 	bl	8006d6a <finitef>
 8005732:	2800      	cmp	r0, #0
 8005734:	d076      	beq.n	8005824 <powf+0x248>
 8005736:	4620      	mov	r0, r4
 8005738:	f001 fb17 	bl	8006d6a <finitef>
 800573c:	2800      	cmp	r0, #0
 800573e:	d071      	beq.n	8005824 <powf+0x248>
 8005740:	4628      	mov	r0, r5
 8005742:	f7fa fe71 	bl	8000428 <__aeabi_f2d>
 8005746:	4682      	mov	sl, r0
 8005748:	4620      	mov	r0, r4
 800574a:	468b      	mov	fp, r1
 800574c:	f7fa fe6c 	bl	8000428 <__aeabi_f2d>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4630      	mov	r0, r6
 8005756:	4631      	mov	r1, r6
 8005758:	e9cd 2300 	strd	r2, r3, [sp]
 800575c:	f7fb fcb8 	bl	80010d0 <__aeabi_fcmpun>
 8005760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005764:	f998 8000 	ldrsb.w	r8, [r8]
 8005768:	4945      	ldr	r1, [pc, #276]	; (8005880 <powf+0x2a4>)
 800576a:	b1b0      	cbz	r0, 800579a <powf+0x1be>
 800576c:	2001      	movs	r0, #1
 800576e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8005772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005776:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800577a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800577e:	f1b8 0f00 	cmp.w	r8, #0
 8005782:	d0bd      	beq.n	8005700 <powf+0x124>
 8005784:	2100      	movs	r1, #0
 8005786:	4608      	mov	r0, r1
 8005788:	f7fb fb90 	bl	8000eac <__aeabi_fdiv>
 800578c:	f7fa fe4c 	bl	8000428 <__aeabi_f2d>
 8005790:	f1b8 0f02 	cmp.w	r8, #2
 8005794:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005798:	e7bc      	b.n	8005714 <powf+0x138>
 800579a:	2603      	movs	r6, #3
 800579c:	900a      	str	r0, [sp, #40]	; 0x28
 800579e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80057a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80057ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057b0:	f7fb fac8 	bl	8000d44 <__aeabi_fmul>
 80057b4:	4604      	mov	r4, r0
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	d11e      	bne.n	80057fa <powf+0x21e>
 80057bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <powf+0x2b0>)
 80057c2:	2100      	movs	r1, #0
 80057c4:	4628      	mov	r0, r5
 80057c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80057ca:	f7fb fc59 	bl	8001080 <__aeabi_fcmplt>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d04e      	beq.n	8005870 <powf+0x294>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f001 fad6 	bl	8006d84 <rintf>
 80057d8:	4621      	mov	r1, r4
 80057da:	f7fb fc47 	bl	800106c <__aeabi_fcmpeq>
 80057de:	b920      	cbnz	r0, 80057ea <powf+0x20e>
 80057e0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80057e4:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <powf+0x2b4>)
 80057e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80057ea:	f997 3000 	ldrsb.w	r3, [r7]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d13e      	bne.n	8005870 <powf+0x294>
 80057f2:	f7ff fd5d 	bl	80052b0 <__errno>
 80057f6:	2322      	movs	r3, #34	; 0x22
 80057f8:	e790      	b.n	800571c <powf+0x140>
 80057fa:	2200      	movs	r2, #0
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <powf+0x2b8>)
 80057fe:	2100      	movs	r1, #0
 8005800:	4628      	mov	r0, r5
 8005802:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005806:	f7fb fc3b 	bl	8001080 <__aeabi_fcmplt>
 800580a:	2800      	cmp	r0, #0
 800580c:	d0ed      	beq.n	80057ea <powf+0x20e>
 800580e:	4620      	mov	r0, r4
 8005810:	f001 fab8 	bl	8006d84 <rintf>
 8005814:	4621      	mov	r1, r4
 8005816:	f7fb fc29 	bl	800106c <__aeabi_fcmpeq>
 800581a:	2800      	cmp	r0, #0
 800581c:	d1e5      	bne.n	80057ea <powf+0x20e>
 800581e:	2200      	movs	r2, #0
 8005820:	4b19      	ldr	r3, [pc, #100]	; (8005888 <powf+0x2ac>)
 8005822:	e7e0      	b.n	80057e6 <powf+0x20a>
 8005824:	2100      	movs	r1, #0
 8005826:	4630      	mov	r0, r6
 8005828:	f7fb fc20 	bl	800106c <__aeabi_fcmpeq>
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f af46 	beq.w	80056be <powf+0xe2>
 8005832:	4628      	mov	r0, r5
 8005834:	f001 fa99 	bl	8006d6a <finitef>
 8005838:	2800      	cmp	r0, #0
 800583a:	f43f af40 	beq.w	80056be <powf+0xe2>
 800583e:	4620      	mov	r0, r4
 8005840:	f001 fa93 	bl	8006d6a <finitef>
 8005844:	2800      	cmp	r0, #0
 8005846:	f43f af3a 	beq.w	80056be <powf+0xe2>
 800584a:	2304      	movs	r3, #4
 800584c:	9302      	str	r3, [sp, #8]
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <powf+0x2a4>)
 8005850:	4628      	mov	r0, r5
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	2300      	movs	r3, #0
 8005856:	930a      	str	r3, [sp, #40]	; 0x28
 8005858:	f7fa fde6 	bl	8000428 <__aeabi_f2d>
 800585c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005860:	4620      	mov	r0, r4
 8005862:	f7fa fde1 	bl	8000428 <__aeabi_f2d>
 8005866:	2200      	movs	r2, #0
 8005868:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800586c:	2300      	movs	r3, #0
 800586e:	e7ba      	b.n	80057e6 <powf+0x20a>
 8005870:	a802      	add	r0, sp, #8
 8005872:	f001 f974 	bl	8006b5e <matherr>
 8005876:	2800      	cmp	r0, #0
 8005878:	f47f af16 	bne.w	80056a8 <powf+0xcc>
 800587c:	e7b9      	b.n	80057f2 <powf+0x216>
 800587e:	bf00      	nop
 8005880:	08006f44 	.word	0x08006f44
 8005884:	3ff00000 	.word	0x3ff00000
 8005888:	fff00000 	.word	0xfff00000
 800588c:	47efffff 	.word	0x47efffff
 8005890:	c7efffff 	.word	0xc7efffff
 8005894:	7ff00000 	.word	0x7ff00000
 8005898:	20000070 	.word	0x20000070
 800589c:	00000000 	.word	0x00000000

080058a0 <__ieee754_pow>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	b091      	sub	sp, #68	; 0x44
 80058a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058aa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80058ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80058b2:	ea55 0302 	orrs.w	r3, r5, r2
 80058b6:	4607      	mov	r7, r0
 80058b8:	4688      	mov	r8, r1
 80058ba:	f000 84b7 	beq.w	800622c <__ieee754_pow+0x98c>
 80058be:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <__ieee754_pow+0x220>)
 80058c0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80058c4:	429c      	cmp	r4, r3
 80058c6:	4689      	mov	r9, r1
 80058c8:	4682      	mov	sl, r0
 80058ca:	dc09      	bgt.n	80058e0 <__ieee754_pow+0x40>
 80058cc:	d103      	bne.n	80058d6 <__ieee754_pow+0x36>
 80058ce:	b938      	cbnz	r0, 80058e0 <__ieee754_pow+0x40>
 80058d0:	42a5      	cmp	r5, r4
 80058d2:	dc0d      	bgt.n	80058f0 <__ieee754_pow+0x50>
 80058d4:	e001      	b.n	80058da <__ieee754_pow+0x3a>
 80058d6:	429d      	cmp	r5, r3
 80058d8:	dc02      	bgt.n	80058e0 <__ieee754_pow+0x40>
 80058da:	429d      	cmp	r5, r3
 80058dc:	d10e      	bne.n	80058fc <__ieee754_pow+0x5c>
 80058de:	b16a      	cbz	r2, 80058fc <__ieee754_pow+0x5c>
 80058e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80058e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80058e8:	ea54 030a 	orrs.w	r3, r4, sl
 80058ec:	f000 849e 	beq.w	800622c <__ieee754_pow+0x98c>
 80058f0:	4874      	ldr	r0, [pc, #464]	; (8005ac4 <__ieee754_pow+0x224>)
 80058f2:	b011      	add	sp, #68	; 0x44
 80058f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	f001 b934 	b.w	8006b64 <nan>
 80058fc:	f1b9 0f00 	cmp.w	r9, #0
 8005900:	da53      	bge.n	80059aa <__ieee754_pow+0x10a>
 8005902:	4b71      	ldr	r3, [pc, #452]	; (8005ac8 <__ieee754_pow+0x228>)
 8005904:	429d      	cmp	r5, r3
 8005906:	dc4e      	bgt.n	80059a6 <__ieee754_pow+0x106>
 8005908:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800590c:	429d      	cmp	r5, r3
 800590e:	dd4c      	ble.n	80059aa <__ieee754_pow+0x10a>
 8005910:	152b      	asrs	r3, r5, #20
 8005912:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005916:	2b14      	cmp	r3, #20
 8005918:	dd28      	ble.n	800596c <__ieee754_pow+0xcc>
 800591a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800591e:	fa22 f103 	lsr.w	r1, r2, r3
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	4293      	cmp	r3, r2
 8005928:	d13f      	bne.n	80059aa <__ieee754_pow+0x10a>
 800592a:	f001 0101 	and.w	r1, r1, #1
 800592e:	f1c1 0302 	rsb	r3, r1, #2
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2a00      	cmp	r2, #0
 8005936:	d15c      	bne.n	80059f2 <__ieee754_pow+0x152>
 8005938:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <__ieee754_pow+0x220>)
 800593a:	429d      	cmp	r5, r3
 800593c:	d126      	bne.n	800598c <__ieee754_pow+0xec>
 800593e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005942:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005946:	ea53 030a 	orrs.w	r3, r3, sl
 800594a:	f000 846f 	beq.w	800622c <__ieee754_pow+0x98c>
 800594e:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <__ieee754_pow+0x22c>)
 8005950:	429c      	cmp	r4, r3
 8005952:	dd2c      	ble.n	80059ae <__ieee754_pow+0x10e>
 8005954:	2e00      	cmp	r6, #0
 8005956:	f280 846f 	bge.w	8006238 <__ieee754_pow+0x998>
 800595a:	f04f 0b00 	mov.w	fp, #0
 800595e:	f04f 0c00 	mov.w	ip, #0
 8005962:	4658      	mov	r0, fp
 8005964:	4661      	mov	r1, ip
 8005966:	b011      	add	sp, #68	; 0x44
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	2a00      	cmp	r2, #0
 800596e:	d13e      	bne.n	80059ee <__ieee754_pow+0x14e>
 8005970:	f1c3 0314 	rsb	r3, r3, #20
 8005974:	fa45 f103 	asr.w	r1, r5, r3
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	42ab      	cmp	r3, r5
 800597e:	f040 8463 	bne.w	8006248 <__ieee754_pow+0x9a8>
 8005982:	f001 0101 	and.w	r1, r1, #1
 8005986:	f1c1 0302 	rsb	r3, r1, #2
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <__ieee754_pow+0x230>)
 800598e:	429d      	cmp	r5, r3
 8005990:	d114      	bne.n	80059bc <__ieee754_pow+0x11c>
 8005992:	2e00      	cmp	r6, #0
 8005994:	f280 8454 	bge.w	8006240 <__ieee754_pow+0x9a0>
 8005998:	463a      	mov	r2, r7
 800599a:	4643      	mov	r3, r8
 800599c:	2000      	movs	r0, #0
 800599e:	494c      	ldr	r1, [pc, #304]	; (8005ad0 <__ieee754_pow+0x230>)
 80059a0:	f7fa fec4 	bl	800072c <__aeabi_ddiv>
 80059a4:	e013      	b.n	80059ce <__ieee754_pow+0x12e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e7c3      	b.n	8005932 <__ieee754_pow+0x92>
 80059aa:	2300      	movs	r3, #0
 80059ac:	e7c1      	b.n	8005932 <__ieee754_pow+0x92>
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	dad3      	bge.n	800595a <__ieee754_pow+0xba>
 80059b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80059b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80059ba:	e7d2      	b.n	8005962 <__ieee754_pow+0xc2>
 80059bc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80059c0:	d108      	bne.n	80059d4 <__ieee754_pow+0x134>
 80059c2:	463a      	mov	r2, r7
 80059c4:	4643      	mov	r3, r8
 80059c6:	4638      	mov	r0, r7
 80059c8:	4641      	mov	r1, r8
 80059ca:	f7fa fd85 	bl	80004d8 <__aeabi_dmul>
 80059ce:	4683      	mov	fp, r0
 80059d0:	468c      	mov	ip, r1
 80059d2:	e7c6      	b.n	8005962 <__ieee754_pow+0xc2>
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <__ieee754_pow+0x234>)
 80059d6:	429e      	cmp	r6, r3
 80059d8:	d10b      	bne.n	80059f2 <__ieee754_pow+0x152>
 80059da:	f1b9 0f00 	cmp.w	r9, #0
 80059de:	db08      	blt.n	80059f2 <__ieee754_pow+0x152>
 80059e0:	4638      	mov	r0, r7
 80059e2:	4641      	mov	r1, r8
 80059e4:	b011      	add	sp, #68	; 0x44
 80059e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f000 bc63 	b.w	80062b4 <__ieee754_sqrt>
 80059ee:	2300      	movs	r3, #0
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4638      	mov	r0, r7
 80059f4:	4641      	mov	r1, r8
 80059f6:	f001 f8a8 	bl	8006b4a <fabs>
 80059fa:	4683      	mov	fp, r0
 80059fc:	468c      	mov	ip, r1
 80059fe:	f1ba 0f00 	cmp.w	sl, #0
 8005a02:	d12b      	bne.n	8005a5c <__ieee754_pow+0x1bc>
 8005a04:	b124      	cbz	r4, 8005a10 <__ieee754_pow+0x170>
 8005a06:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <__ieee754_pow+0x230>)
 8005a08:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d125      	bne.n	8005a5c <__ieee754_pow+0x1bc>
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	da07      	bge.n	8005a24 <__ieee754_pow+0x184>
 8005a14:	465a      	mov	r2, fp
 8005a16:	4663      	mov	r3, ip
 8005a18:	2000      	movs	r0, #0
 8005a1a:	492d      	ldr	r1, [pc, #180]	; (8005ad0 <__ieee754_pow+0x230>)
 8005a1c:	f7fa fe86 	bl	800072c <__aeabi_ddiv>
 8005a20:	4683      	mov	fp, r0
 8005a22:	468c      	mov	ip, r1
 8005a24:	f1b9 0f00 	cmp.w	r9, #0
 8005a28:	da9b      	bge.n	8005962 <__ieee754_pow+0xc2>
 8005a2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a2e:	9b00      	ldr	r3, [sp, #0]
 8005a30:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a34:	4323      	orrs	r3, r4
 8005a36:	d108      	bne.n	8005a4a <__ieee754_pow+0x1aa>
 8005a38:	465a      	mov	r2, fp
 8005a3a:	4663      	mov	r3, ip
 8005a3c:	4658      	mov	r0, fp
 8005a3e:	4661      	mov	r1, ip
 8005a40:	f7fa fb92 	bl	8000168 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	e7aa      	b.n	80059a0 <__ieee754_pow+0x100>
 8005a4a:	9b00      	ldr	r3, [sp, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d188      	bne.n	8005962 <__ieee754_pow+0xc2>
 8005a50:	4658      	mov	r0, fp
 8005a52:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005a56:	4683      	mov	fp, r0
 8005a58:	469c      	mov	ip, r3
 8005a5a:	e782      	b.n	8005962 <__ieee754_pow+0xc2>
 8005a5c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005a60:	f109 33ff 	add.w	r3, r9, #4294967295
 8005a64:	930d      	str	r3, [sp, #52]	; 0x34
 8005a66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a68:	9b00      	ldr	r3, [sp, #0]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d104      	bne.n	8005a78 <__ieee754_pow+0x1d8>
 8005a6e:	463a      	mov	r2, r7
 8005a70:	4643      	mov	r3, r8
 8005a72:	4638      	mov	r0, r7
 8005a74:	4641      	mov	r1, r8
 8005a76:	e7e3      	b.n	8005a40 <__ieee754_pow+0x1a0>
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <__ieee754_pow+0x238>)
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	f340 80fe 	ble.w	8005c7c <__ieee754_pow+0x3dc>
 8005a80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a84:	429d      	cmp	r5, r3
 8005a86:	dd0b      	ble.n	8005aa0 <__ieee754_pow+0x200>
 8005a88:	4b10      	ldr	r3, [pc, #64]	; (8005acc <__ieee754_pow+0x22c>)
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	dc0e      	bgt.n	8005aac <__ieee754_pow+0x20c>
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	f6bf af63 	bge.w	800595a <__ieee754_pow+0xba>
 8005a94:	a308      	add	r3, pc, #32	; (adr r3, 8005ab8 <__ieee754_pow+0x218>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	e794      	b.n	80059ca <__ieee754_pow+0x12a>
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <__ieee754_pow+0x23c>)
 8005aa2:	429c      	cmp	r4, r3
 8005aa4:	ddf3      	ble.n	8005a8e <__ieee754_pow+0x1ee>
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <__ieee754_pow+0x230>)
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	dd19      	ble.n	8005ae0 <__ieee754_pow+0x240>
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	dcf1      	bgt.n	8005a94 <__ieee754_pow+0x1f4>
 8005ab0:	e753      	b.n	800595a <__ieee754_pow+0xba>
 8005ab2:	bf00      	nop
 8005ab4:	f3af 8000 	nop.w
 8005ab8:	8800759c 	.word	0x8800759c
 8005abc:	7e37e43c 	.word	0x7e37e43c
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	08006f48 	.word	0x08006f48
 8005ac8:	433fffff 	.word	0x433fffff
 8005acc:	3fefffff 	.word	0x3fefffff
 8005ad0:	3ff00000 	.word	0x3ff00000
 8005ad4:	3fe00000 	.word	0x3fe00000
 8005ad8:	41e00000 	.word	0x41e00000
 8005adc:	3feffffe 	.word	0x3feffffe
 8005ae0:	4661      	mov	r1, ip
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b60      	ldr	r3, [pc, #384]	; (8005c68 <__ieee754_pow+0x3c8>)
 8005ae6:	4658      	mov	r0, fp
 8005ae8:	f7fa fb3e 	bl	8000168 <__aeabi_dsub>
 8005aec:	a354      	add	r3, pc, #336	; (adr r3, 8005c40 <__ieee754_pow+0x3a0>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	4604      	mov	r4, r0
 8005af4:	460d      	mov	r5, r1
 8005af6:	f7fa fcef 	bl	80004d8 <__aeabi_dmul>
 8005afa:	a353      	add	r3, pc, #332	; (adr r3, 8005c48 <__ieee754_pow+0x3a8>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fce6 	bl	80004d8 <__aeabi_dmul>
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4682      	mov	sl, r0
 8005b10:	468b      	mov	fp, r1
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <__ieee754_pow+0x3cc>)
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fcde 	bl	80004d8 <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	a14b      	add	r1, pc, #300	; (adr r1, 8005c50 <__ieee754_pow+0x3b0>)
 8005b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b26:	f7fa fb1f 	bl	8000168 <__aeabi_dsub>
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	f7fa fcd3 	bl	80004d8 <__aeabi_dmul>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	2000      	movs	r0, #0
 8005b38:	494d      	ldr	r1, [pc, #308]	; (8005c70 <__ieee754_pow+0x3d0>)
 8005b3a:	f7fa fb15 	bl	8000168 <__aeabi_dsub>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	4680      	mov	r8, r0
 8005b44:	4689      	mov	r9, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fcc5 	bl	80004d8 <__aeabi_dmul>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	f7fa fcbf 	bl	80004d8 <__aeabi_dmul>
 8005b5a:	a33f      	add	r3, pc, #252	; (adr r3, 8005c58 <__ieee754_pow+0x3b8>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f7fa fcba 	bl	80004d8 <__aeabi_dmul>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4650      	mov	r0, sl
 8005b6a:	4659      	mov	r1, fp
 8005b6c:	f7fa fafc 	bl	8000168 <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4604      	mov	r4, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	4630      	mov	r0, r6
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	f7fa faf6 	bl	800016c <__adddf3>
 8005b80:	2000      	movs	r0, #0
 8005b82:	468b      	mov	fp, r1
 8005b84:	4682      	mov	sl, r0
 8005b86:	4632      	mov	r2, r6
 8005b88:	463b      	mov	r3, r7
 8005b8a:	f7fa faed 	bl	8000168 <__aeabi_dsub>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4620      	mov	r0, r4
 8005b94:	4629      	mov	r1, r5
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	9b00      	ldr	r3, [sp, #0]
 8005b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	bf0c      	ite	eq
 8005ba8:	4c32      	ldreq	r4, [pc, #200]	; (8005c74 <__ieee754_pow+0x3d4>)
 8005baa:	4c2f      	ldrne	r4, [pc, #188]	; (8005c68 <__ieee754_pow+0x3c8>)
 8005bac:	4606      	mov	r6, r0
 8005bae:	e9cd 3400 	strd	r3, r4, [sp]
 8005bb2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bb6:	2400      	movs	r4, #0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fad1 	bl	8000168 <__aeabi_dsub>
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	465b      	mov	r3, fp
 8005bca:	f7fa fc85 	bl	80004d8 <__aeabi_dmul>
 8005bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd2:	4680      	mov	r8, r0
 8005bd4:	4689      	mov	r9, r1
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	4639      	mov	r1, r7
 8005bda:	f7fa fc7d 	bl	80004d8 <__aeabi_dmul>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa fac1 	bl	800016c <__adddf3>
 8005bea:	4622      	mov	r2, r4
 8005bec:	462b      	mov	r3, r5
 8005bee:	4680      	mov	r8, r0
 8005bf0:	4689      	mov	r9, r1
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	f7fa fc6f 	bl	80004d8 <__aeabi_dmul>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4602      	mov	r2, r0
 8005c02:	4649      	mov	r1, r9
 8005c04:	4640      	mov	r0, r8
 8005c06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c0a:	f7fa faaf 	bl	800016c <__adddf3>
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <__ieee754_pow+0x3d8>)
 8005c10:	4682      	mov	sl, r0
 8005c12:	4299      	cmp	r1, r3
 8005c14:	460f      	mov	r7, r1
 8005c16:	460e      	mov	r6, r1
 8005c18:	f340 82e1 	ble.w	80061de <__ieee754_pow+0x93e>
 8005c1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c24:	4303      	orrs	r3, r0
 8005c26:	f000 81db 	beq.w	8005fe0 <__ieee754_pow+0x740>
 8005c2a:	a30d      	add	r3, pc, #52	; (adr r3, 8005c60 <__ieee754_pow+0x3c0>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c34:	f7fa fc50 	bl	80004d8 <__aeabi_dmul>
 8005c38:	a309      	add	r3, pc, #36	; (adr r3, 8005c60 <__ieee754_pow+0x3c0>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	e6c4      	b.n	80059ca <__ieee754_pow+0x12a>
 8005c40:	60000000 	.word	0x60000000
 8005c44:	3ff71547 	.word	0x3ff71547
 8005c48:	f85ddf44 	.word	0xf85ddf44
 8005c4c:	3e54ae0b 	.word	0x3e54ae0b
 8005c50:	55555555 	.word	0x55555555
 8005c54:	3fd55555 	.word	0x3fd55555
 8005c58:	652b82fe 	.word	0x652b82fe
 8005c5c:	3ff71547 	.word	0x3ff71547
 8005c60:	8800759c 	.word	0x8800759c
 8005c64:	7e37e43c 	.word	0x7e37e43c
 8005c68:	3ff00000 	.word	0x3ff00000
 8005c6c:	3fd00000 	.word	0x3fd00000
 8005c70:	3fe00000 	.word	0x3fe00000
 8005c74:	bff00000 	.word	0xbff00000
 8005c78:	408fffff 	.word	0x408fffff
 8005c7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	da08      	bge.n	8005c98 <__ieee754_pow+0x3f8>
 8005c86:	4658      	mov	r0, fp
 8005c88:	4bcd      	ldr	r3, [pc, #820]	; (8005fc0 <__ieee754_pow+0x720>)
 8005c8a:	4661      	mov	r1, ip
 8005c8c:	f7fa fc24 	bl	80004d8 <__aeabi_dmul>
 8005c90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c94:	4683      	mov	fp, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	1523      	asrs	r3, r4, #20
 8005c9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c9e:	4413      	add	r3, r2
 8005ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ca2:	4bc8      	ldr	r3, [pc, #800]	; (8005fc4 <__ieee754_pow+0x724>)
 8005ca4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ca8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005cac:	429c      	cmp	r4, r3
 8005cae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005cb2:	dd08      	ble.n	8005cc6 <__ieee754_pow+0x426>
 8005cb4:	4bc4      	ldr	r3, [pc, #784]	; (8005fc8 <__ieee754_pow+0x728>)
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	f340 815b 	ble.w	8005f72 <__ieee754_pow+0x6d2>
 8005cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8005cc6:	f04f 0800 	mov.w	r8, #0
 8005cca:	4658      	mov	r0, fp
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4bbf      	ldr	r3, [pc, #764]	; (8005fcc <__ieee754_pow+0x72c>)
 8005cd0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005cd4:	444b      	add	r3, r9
 8005cd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ce6:	f7fa fa3f 	bl	8000168 <__aeabi_dsub>
 8005cea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005cf6:	f7fa fa39 	bl	800016c <__adddf3>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	2000      	movs	r0, #0
 8005d00:	49b3      	ldr	r1, [pc, #716]	; (8005fd0 <__ieee754_pow+0x730>)
 8005d02:	f7fa fd13 	bl	800072c <__aeabi_ddiv>
 8005d06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4639      	mov	r1, r7
 8005d12:	f7fa fbe1 	bl	80004d8 <__aeabi_dmul>
 8005d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d1a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005d1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d22:	2300      	movs	r3, #0
 8005d24:	2200      	movs	r2, #0
 8005d26:	106d      	asrs	r5, r5, #1
 8005d28:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d36:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	4614      	mov	r4, r2
 8005d40:	461d      	mov	r5, r3
 8005d42:	f7fa fbc9 	bl	80004d8 <__aeabi_dmul>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	f7fa fa0b 	bl	8000168 <__aeabi_dsub>
 8005d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d56:	4606      	mov	r6, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fa03 	bl	8000168 <__aeabi_dsub>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d6a:	f7fa f9fd 	bl	8000168 <__aeabi_dsub>
 8005d6e:	4652      	mov	r2, sl
 8005d70:	465b      	mov	r3, fp
 8005d72:	f7fa fbb1 	bl	80004d8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa f9f3 	bl	8000168 <__aeabi_dsub>
 8005d82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d86:	f7fa fba7 	bl	80004d8 <__aeabi_dmul>
 8005d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fa fb9f 	bl	80004d8 <__aeabi_dmul>
 8005d9a:	a377      	add	r3, pc, #476	; (adr r3, 8005f78 <__ieee754_pow+0x6d8>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	f7fa fb98 	bl	80004d8 <__aeabi_dmul>
 8005da8:	a375      	add	r3, pc, #468	; (adr r3, 8005f80 <__ieee754_pow+0x6e0>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa f9dd 	bl	800016c <__adddf3>
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f7fa fb8f 	bl	80004d8 <__aeabi_dmul>
 8005dba:	a373      	add	r3, pc, #460	; (adr r3, 8005f88 <__ieee754_pow+0x6e8>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa f9d4 	bl	800016c <__adddf3>
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f7fa fb86 	bl	80004d8 <__aeabi_dmul>
 8005dcc:	a370      	add	r3, pc, #448	; (adr r3, 8005f90 <__ieee754_pow+0x6f0>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa f9cb 	bl	800016c <__adddf3>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	f7fa fb7d 	bl	80004d8 <__aeabi_dmul>
 8005dde:	a36e      	add	r3, pc, #440	; (adr r3, 8005f98 <__ieee754_pow+0x6f8>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa f9c2 	bl	800016c <__adddf3>
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	f7fa fb74 	bl	80004d8 <__aeabi_dmul>
 8005df0:	a36b      	add	r3, pc, #428	; (adr r3, 8005fa0 <__ieee754_pow+0x700>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa f9b9 	bl	800016c <__adddf3>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	462b      	mov	r3, r5
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fb67 	bl	80004d8 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fb61 	bl	80004d8 <__aeabi_dmul>
 8005e16:	4604      	mov	r4, r0
 8005e18:	460d      	mov	r5, r1
 8005e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1e:	4652      	mov	r2, sl
 8005e20:	465b      	mov	r3, fp
 8005e22:	f7fa f9a3 	bl	800016c <__adddf3>
 8005e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e2a:	f7fa fb55 	bl	80004d8 <__aeabi_dmul>
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f7fa f99b 	bl	800016c <__adddf3>
 8005e36:	4652      	mov	r2, sl
 8005e38:	4606      	mov	r6, r0
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	465b      	mov	r3, fp
 8005e3e:	4650      	mov	r0, sl
 8005e40:	4659      	mov	r1, fp
 8005e42:	f7fa fb49 	bl	80004d8 <__aeabi_dmul>
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b62      	ldr	r3, [pc, #392]	; (8005fd4 <__ieee754_pow+0x734>)
 8005e4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e4e:	f7fa f98d 	bl	800016c <__adddf3>
 8005e52:	4632      	mov	r2, r6
 8005e54:	463b      	mov	r3, r7
 8005e56:	f7fa f989 	bl	800016c <__adddf3>
 8005e5a:	9804      	ldr	r0, [sp, #16]
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4650      	mov	r0, sl
 8005e66:	4659      	mov	r1, fp
 8005e68:	f7fa fb36 	bl	80004d8 <__aeabi_dmul>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4682      	mov	sl, r0
 8005e70:	468b      	mov	fp, r1
 8005e72:	4b58      	ldr	r3, [pc, #352]	; (8005fd4 <__ieee754_pow+0x734>)
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa f976 	bl	8000168 <__aeabi_dsub>
 8005e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e80:	f7fa f972 	bl	8000168 <__aeabi_dsub>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa f96c 	bl	8000168 <__aeabi_dsub>
 8005e90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e94:	f7fa fb20 	bl	80004d8 <__aeabi_dmul>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	460f      	mov	r7, r1
 8005e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa f95c 	bl	800016c <__adddf3>
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	460f      	mov	r7, r1
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	f7fa f954 	bl	800016c <__adddf3>
 8005ec4:	a338      	add	r3, pc, #224	; (adr r3, 8005fa8 <__ieee754_pow+0x708>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	9804      	ldr	r0, [sp, #16]
 8005ecc:	460d      	mov	r5, r1
 8005ece:	4604      	mov	r4, r0
 8005ed0:	f7fa fb02 	bl	80004d8 <__aeabi_dmul>
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005eda:	465b      	mov	r3, fp
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f942 	bl	8000168 <__aeabi_dsub>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa f93c 	bl	8000168 <__aeabi_dsub>
 8005ef0:	a32f      	add	r3, pc, #188	; (adr r3, 8005fb0 <__ieee754_pow+0x710>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	a32f      	add	r3, pc, #188	; (adr r3, 8005fb8 <__ieee754_pow+0x718>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fae6 	bl	80004d8 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4630      	mov	r0, r6
 8005f12:	4639      	mov	r1, r7
 8005f14:	f7fa f92a 	bl	800016c <__adddf3>
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <__ieee754_pow+0x738>)
 8005f1a:	444b      	add	r3, r9
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fa f924 	bl	800016c <__adddf3>
 8005f24:	4604      	mov	r4, r0
 8005f26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f28:	460d      	mov	r5, r1
 8005f2a:	f7fa fa6b 	bl	8000404 <__aeabi_i2d>
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460f      	mov	r7, r1
 8005f32:	4b2a      	ldr	r3, [pc, #168]	; (8005fdc <__ieee754_pow+0x73c>)
 8005f34:	4622      	mov	r2, r4
 8005f36:	444b      	add	r3, r9
 8005f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f42:	f7fa f913 	bl	800016c <__adddf3>
 8005f46:	4642      	mov	r2, r8
 8005f48:	464b      	mov	r3, r9
 8005f4a:	f7fa f90f 	bl	800016c <__adddf3>
 8005f4e:	4632      	mov	r2, r6
 8005f50:	463b      	mov	r3, r7
 8005f52:	f7fa f90b 	bl	800016c <__adddf3>
 8005f56:	9804      	ldr	r0, [sp, #16]
 8005f58:	4632      	mov	r2, r6
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	4682      	mov	sl, r0
 8005f5e:	468b      	mov	fp, r1
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	f7fa f8fe 	bl	8000168 <__aeabi_dsub>
 8005f6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f70:	e60b      	b.n	8005b8a <__ieee754_pow+0x2ea>
 8005f72:	f04f 0801 	mov.w	r8, #1
 8005f76:	e6a8      	b.n	8005cca <__ieee754_pow+0x42a>
 8005f78:	4a454eef 	.word	0x4a454eef
 8005f7c:	3fca7e28 	.word	0x3fca7e28
 8005f80:	93c9db65 	.word	0x93c9db65
 8005f84:	3fcd864a 	.word	0x3fcd864a
 8005f88:	a91d4101 	.word	0xa91d4101
 8005f8c:	3fd17460 	.word	0x3fd17460
 8005f90:	518f264d 	.word	0x518f264d
 8005f94:	3fd55555 	.word	0x3fd55555
 8005f98:	db6fabff 	.word	0xdb6fabff
 8005f9c:	3fdb6db6 	.word	0x3fdb6db6
 8005fa0:	33333303 	.word	0x33333303
 8005fa4:	3fe33333 	.word	0x3fe33333
 8005fa8:	e0000000 	.word	0xe0000000
 8005fac:	3feec709 	.word	0x3feec709
 8005fb0:	dc3a03fd 	.word	0xdc3a03fd
 8005fb4:	3feec709 	.word	0x3feec709
 8005fb8:	145b01f5 	.word	0x145b01f5
 8005fbc:	be3e2fe0 	.word	0xbe3e2fe0
 8005fc0:	43400000 	.word	0x43400000
 8005fc4:	0003988e 	.word	0x0003988e
 8005fc8:	000bb679 	.word	0x000bb679
 8005fcc:	08006f50 	.word	0x08006f50
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	40080000 	.word	0x40080000
 8005fd8:	08006f70 	.word	0x08006f70
 8005fdc:	08006f60 	.word	0x08006f60
 8005fe0:	a39b      	add	r3, pc, #620	; (adr r3, 8006250 <__ieee754_pow+0x9b0>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	4649      	mov	r1, r9
 8005fea:	f7fa f8bf 	bl	800016c <__adddf3>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	4650      	mov	r0, sl
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa f8b5 	bl	8000168 <__aeabi_dsub>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006006:	f7fa fcf7 	bl	80009f8 <__aeabi_dcmpgt>
 800600a:	2800      	cmp	r0, #0
 800600c:	f47f ae0d 	bne.w	8005c2a <__ieee754_pow+0x38a>
 8006010:	4aa3      	ldr	r2, [pc, #652]	; (80062a0 <__ieee754_pow+0xa00>)
 8006012:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006016:	4293      	cmp	r3, r2
 8006018:	f340 8103 	ble.w	8006222 <__ieee754_pow+0x982>
 800601c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006020:	2000      	movs	r0, #0
 8006022:	151b      	asrs	r3, r3, #20
 8006024:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006028:	fa4a f303 	asr.w	r3, sl, r3
 800602c:	4433      	add	r3, r6
 800602e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006032:	4f9c      	ldr	r7, [pc, #624]	; (80062a4 <__ieee754_pow+0xa04>)
 8006034:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006038:	4117      	asrs	r7, r2
 800603a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800603e:	ea23 0107 	bic.w	r1, r3, r7
 8006042:	f1c2 0214 	rsb	r2, r2, #20
 8006046:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800604a:	fa4a fa02 	asr.w	sl, sl, r2
 800604e:	2e00      	cmp	r6, #0
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	bfb8      	it	lt
 800605a:	f1ca 0a00 	rsblt	sl, sl, #0
 800605e:	f7fa f883 	bl	8000168 <__aeabi_dsub>
 8006062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	f7fa f87d 	bl	800016c <__adddf3>
 8006072:	a379      	add	r3, pc, #484	; (adr r3, 8006258 <__ieee754_pow+0x9b8>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	2000      	movs	r0, #0
 800607a:	460d      	mov	r5, r1
 800607c:	4604      	mov	r4, r0
 800607e:	f7fa fa2b 	bl	80004d8 <__aeabi_dmul>
 8006082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	f7fa f86b 	bl	8000168 <__aeabi_dsub>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f7fa f865 	bl	8000168 <__aeabi_dsub>
 800609e:	a370      	add	r3, pc, #448	; (adr r3, 8006260 <__ieee754_pow+0x9c0>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa fa18 	bl	80004d8 <__aeabi_dmul>
 80060a8:	a36f      	add	r3, pc, #444	; (adr r3, 8006268 <__ieee754_pow+0x9c8>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	4680      	mov	r8, r0
 80060b0:	4689      	mov	r9, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f7fa fa0f 	bl	80004d8 <__aeabi_dmul>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4640      	mov	r0, r8
 80060c0:	4649      	mov	r1, r9
 80060c2:	f7fa f853 	bl	800016c <__adddf3>
 80060c6:	4604      	mov	r4, r0
 80060c8:	460d      	mov	r5, r1
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa f84b 	bl	800016c <__adddf3>
 80060d6:	4632      	mov	r2, r6
 80060d8:	463b      	mov	r3, r7
 80060da:	4680      	mov	r8, r0
 80060dc:	4689      	mov	r9, r1
 80060de:	f7fa f843 	bl	8000168 <__aeabi_dsub>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa f83d 	bl	8000168 <__aeabi_dsub>
 80060ee:	4642      	mov	r2, r8
 80060f0:	4606      	mov	r6, r0
 80060f2:	460f      	mov	r7, r1
 80060f4:	464b      	mov	r3, r9
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	a35c      	add	r3, pc, #368	; (adr r3, 8006270 <__ieee754_pow+0x9d0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	a35a      	add	r3, pc, #360	; (adr r3, 8006278 <__ieee754_pow+0x9d8>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f829 	bl	8000168 <__aeabi_dsub>
 8006116:	4622      	mov	r2, r4
 8006118:	462b      	mov	r3, r5
 800611a:	f7fa f9dd 	bl	80004d8 <__aeabi_dmul>
 800611e:	a358      	add	r3, pc, #352	; (adr r3, 8006280 <__ieee754_pow+0x9e0>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa f822 	bl	800016c <__adddf3>
 8006128:	4622      	mov	r2, r4
 800612a:	462b      	mov	r3, r5
 800612c:	f7fa f9d4 	bl	80004d8 <__aeabi_dmul>
 8006130:	a355      	add	r3, pc, #340	; (adr r3, 8006288 <__ieee754_pow+0x9e8>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	f7fa f9cb 	bl	80004d8 <__aeabi_dmul>
 8006142:	a353      	add	r3, pc, #332	; (adr r3, 8006290 <__ieee754_pow+0x9f0>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa f810 	bl	800016c <__adddf3>
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	f7fa f9c2 	bl	80004d8 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa f804 	bl	8000168 <__aeabi_dsub>
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4640      	mov	r0, r8
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa f9b4 	bl	80004d8 <__aeabi_dmul>
 8006170:	2200      	movs	r2, #0
 8006172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7f9 fff3 	bl	8000168 <__aeabi_dsub>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	f7fa facf 	bl	800072c <__aeabi_ddiv>
 800618e:	4632      	mov	r2, r6
 8006190:	4604      	mov	r4, r0
 8006192:	460d      	mov	r5, r1
 8006194:	463b      	mov	r3, r7
 8006196:	4640      	mov	r0, r8
 8006198:	4649      	mov	r1, r9
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	4632      	mov	r2, r6
 80061a0:	463b      	mov	r3, r7
 80061a2:	f7f9 ffe3 	bl	800016c <__adddf3>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7f9 ffdb 	bl	8000168 <__aeabi_dsub>
 80061b2:	4642      	mov	r2, r8
 80061b4:	464b      	mov	r3, r9
 80061b6:	f7f9 ffd7 	bl	8000168 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	2000      	movs	r0, #0
 80061c0:	4939      	ldr	r1, [pc, #228]	; (80062a8 <__ieee754_pow+0xa08>)
 80061c2:	f7f9 ffd1 	bl	8000168 <__aeabi_dsub>
 80061c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80061ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80061ce:	da2b      	bge.n	8006228 <__ieee754_pow+0x988>
 80061d0:	4652      	mov	r2, sl
 80061d2:	f000 fd59 	bl	8006c88 <scalbn>
 80061d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061da:	f7ff bbf6 	b.w	80059ca <__ieee754_pow+0x12a>
 80061de:	4b33      	ldr	r3, [pc, #204]	; (80062ac <__ieee754_pow+0xa0c>)
 80061e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80061e4:	429f      	cmp	r7, r3
 80061e6:	f77f af13 	ble.w	8006010 <__ieee754_pow+0x770>
 80061ea:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <__ieee754_pow+0xa10>)
 80061ec:	440b      	add	r3, r1
 80061ee:	4303      	orrs	r3, r0
 80061f0:	d00b      	beq.n	800620a <__ieee754_pow+0x96a>
 80061f2:	a329      	add	r3, pc, #164	; (adr r3, 8006298 <__ieee754_pow+0x9f8>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061fc:	f7fa f96c 	bl	80004d8 <__aeabi_dmul>
 8006200:	a325      	add	r3, pc, #148	; (adr r3, 8006298 <__ieee754_pow+0x9f8>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7ff bbe0 	b.w	80059ca <__ieee754_pow+0x12a>
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	f7f9 ffab 	bl	8000168 <__aeabi_dsub>
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	f7fa fbe5 	bl	80009e4 <__aeabi_dcmpge>
 800621a:	2800      	cmp	r0, #0
 800621c:	f43f aef8 	beq.w	8006010 <__ieee754_pow+0x770>
 8006220:	e7e7      	b.n	80061f2 <__ieee754_pow+0x952>
 8006222:	f04f 0a00 	mov.w	sl, #0
 8006226:	e71e      	b.n	8006066 <__ieee754_pow+0x7c6>
 8006228:	4621      	mov	r1, r4
 800622a:	e7d4      	b.n	80061d6 <__ieee754_pow+0x936>
 800622c:	f04f 0b00 	mov.w	fp, #0
 8006230:	f8df c074 	ldr.w	ip, [pc, #116]	; 80062a8 <__ieee754_pow+0xa08>
 8006234:	f7ff bb95 	b.w	8005962 <__ieee754_pow+0xc2>
 8006238:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800623c:	f7ff bb91 	b.w	8005962 <__ieee754_pow+0xc2>
 8006240:	4638      	mov	r0, r7
 8006242:	4641      	mov	r1, r8
 8006244:	f7ff bbc3 	b.w	80059ce <__ieee754_pow+0x12e>
 8006248:	9200      	str	r2, [sp, #0]
 800624a:	f7ff bb9f 	b.w	800598c <__ieee754_pow+0xec>
 800624e:	bf00      	nop
 8006250:	652b82fe 	.word	0x652b82fe
 8006254:	3c971547 	.word	0x3c971547
 8006258:	00000000 	.word	0x00000000
 800625c:	3fe62e43 	.word	0x3fe62e43
 8006260:	fefa39ef 	.word	0xfefa39ef
 8006264:	3fe62e42 	.word	0x3fe62e42
 8006268:	0ca86c39 	.word	0x0ca86c39
 800626c:	be205c61 	.word	0xbe205c61
 8006270:	72bea4d0 	.word	0x72bea4d0
 8006274:	3e663769 	.word	0x3e663769
 8006278:	c5d26bf1 	.word	0xc5d26bf1
 800627c:	3ebbbd41 	.word	0x3ebbbd41
 8006280:	af25de2c 	.word	0xaf25de2c
 8006284:	3f11566a 	.word	0x3f11566a
 8006288:	16bebd93 	.word	0x16bebd93
 800628c:	3f66c16c 	.word	0x3f66c16c
 8006290:	5555553e 	.word	0x5555553e
 8006294:	3fc55555 	.word	0x3fc55555
 8006298:	c2f8f359 	.word	0xc2f8f359
 800629c:	01a56e1f 	.word	0x01a56e1f
 80062a0:	3fe00000 	.word	0x3fe00000
 80062a4:	000fffff 	.word	0x000fffff
 80062a8:	3ff00000 	.word	0x3ff00000
 80062ac:	4090cbff 	.word	0x4090cbff
 80062b0:	3f6f3400 	.word	0x3f6f3400

080062b4 <__ieee754_sqrt>:
 80062b4:	4b54      	ldr	r3, [pc, #336]	; (8006408 <__ieee754_sqrt+0x154>)
 80062b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	438b      	bics	r3, r1
 80062bc:	4606      	mov	r6, r0
 80062be:	460d      	mov	r5, r1
 80062c0:	460a      	mov	r2, r1
 80062c2:	460c      	mov	r4, r1
 80062c4:	d10f      	bne.n	80062e6 <__ieee754_sqrt+0x32>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	f7fa f905 	bl	80004d8 <__aeabi_dmul>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4630      	mov	r0, r6
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7f9 ff49 	bl	800016c <__adddf3>
 80062da:	4606      	mov	r6, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	4630      	mov	r0, r6
 80062e0:	4629      	mov	r1, r5
 80062e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e6:	2900      	cmp	r1, #0
 80062e8:	4607      	mov	r7, r0
 80062ea:	4603      	mov	r3, r0
 80062ec:	dc0e      	bgt.n	800630c <__ieee754_sqrt+0x58>
 80062ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80062f2:	ea5c 0707 	orrs.w	r7, ip, r7
 80062f6:	d0f2      	beq.n	80062de <__ieee754_sqrt+0x2a>
 80062f8:	b141      	cbz	r1, 800630c <__ieee754_sqrt+0x58>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	f7f9 ff33 	bl	8000168 <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	f7fa fa11 	bl	800072c <__aeabi_ddiv>
 800630a:	e7e6      	b.n	80062da <__ieee754_sqrt+0x26>
 800630c:	1512      	asrs	r2, r2, #20
 800630e:	d074      	beq.n	80063fa <__ieee754_sqrt+0x146>
 8006310:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006314:	07d5      	lsls	r5, r2, #31
 8006316:	f04f 0500 	mov.w	r5, #0
 800631a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800631e:	bf48      	it	mi
 8006320:	0fd9      	lsrmi	r1, r3, #31
 8006322:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006326:	bf44      	itt	mi
 8006328:	005b      	lslmi	r3, r3, #1
 800632a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800632e:	1051      	asrs	r1, r2, #1
 8006330:	0fda      	lsrs	r2, r3, #31
 8006332:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006336:	4628      	mov	r0, r5
 8006338:	2216      	movs	r2, #22
 800633a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	1987      	adds	r7, r0, r6
 8006342:	42a7      	cmp	r7, r4
 8006344:	bfde      	ittt	le
 8006346:	19b8      	addle	r0, r7, r6
 8006348:	1be4      	suble	r4, r4, r7
 800634a:	19ad      	addle	r5, r5, r6
 800634c:	0fdf      	lsrs	r7, r3, #31
 800634e:	3a01      	subs	r2, #1
 8006350:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006354:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006358:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800635c:	d1f0      	bne.n	8006340 <__ieee754_sqrt+0x8c>
 800635e:	f04f 0c20 	mov.w	ip, #32
 8006362:	4696      	mov	lr, r2
 8006364:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006368:	4284      	cmp	r4, r0
 800636a:	eb06 070e 	add.w	r7, r6, lr
 800636e:	dc02      	bgt.n	8006376 <__ieee754_sqrt+0xc2>
 8006370:	d112      	bne.n	8006398 <__ieee754_sqrt+0xe4>
 8006372:	429f      	cmp	r7, r3
 8006374:	d810      	bhi.n	8006398 <__ieee754_sqrt+0xe4>
 8006376:	2f00      	cmp	r7, #0
 8006378:	eb07 0e06 	add.w	lr, r7, r6
 800637c:	da42      	bge.n	8006404 <__ieee754_sqrt+0x150>
 800637e:	f1be 0f00 	cmp.w	lr, #0
 8006382:	db3f      	blt.n	8006404 <__ieee754_sqrt+0x150>
 8006384:	f100 0801 	add.w	r8, r0, #1
 8006388:	1a24      	subs	r4, r4, r0
 800638a:	4640      	mov	r0, r8
 800638c:	429f      	cmp	r7, r3
 800638e:	bf88      	it	hi
 8006390:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006394:	1bdb      	subs	r3, r3, r7
 8006396:	4432      	add	r2, r6
 8006398:	0064      	lsls	r4, r4, #1
 800639a:	f1bc 0c01 	subs.w	ip, ip, #1
 800639e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80063a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063aa:	d1dd      	bne.n	8006368 <__ieee754_sqrt+0xb4>
 80063ac:	4323      	orrs	r3, r4
 80063ae:	d006      	beq.n	80063be <__ieee754_sqrt+0x10a>
 80063b0:	1c54      	adds	r4, r2, #1
 80063b2:	bf0b      	itete	eq
 80063b4:	4662      	moveq	r2, ip
 80063b6:	3201      	addne	r2, #1
 80063b8:	3501      	addeq	r5, #1
 80063ba:	f022 0201 	bicne.w	r2, r2, #1
 80063be:	106b      	asrs	r3, r5, #1
 80063c0:	0852      	lsrs	r2, r2, #1
 80063c2:	07e8      	lsls	r0, r5, #31
 80063c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80063c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80063cc:	bf48      	it	mi
 80063ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80063d2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80063d6:	4616      	mov	r6, r2
 80063d8:	e781      	b.n	80062de <__ieee754_sqrt+0x2a>
 80063da:	0adc      	lsrs	r4, r3, #11
 80063dc:	3915      	subs	r1, #21
 80063de:	055b      	lsls	r3, r3, #21
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	d0fa      	beq.n	80063da <__ieee754_sqrt+0x126>
 80063e4:	02e6      	lsls	r6, r4, #11
 80063e6:	d50a      	bpl.n	80063fe <__ieee754_sqrt+0x14a>
 80063e8:	f1c2 0020 	rsb	r0, r2, #32
 80063ec:	fa23 f000 	lsr.w	r0, r3, r0
 80063f0:	1e55      	subs	r5, r2, #1
 80063f2:	4093      	lsls	r3, r2
 80063f4:	4304      	orrs	r4, r0
 80063f6:	1b4a      	subs	r2, r1, r5
 80063f8:	e78a      	b.n	8006310 <__ieee754_sqrt+0x5c>
 80063fa:	4611      	mov	r1, r2
 80063fc:	e7f0      	b.n	80063e0 <__ieee754_sqrt+0x12c>
 80063fe:	0064      	lsls	r4, r4, #1
 8006400:	3201      	adds	r2, #1
 8006402:	e7ef      	b.n	80063e4 <__ieee754_sqrt+0x130>
 8006404:	4680      	mov	r8, r0
 8006406:	e7bf      	b.n	8006388 <__ieee754_sqrt+0xd4>
 8006408:	7ff00000 	.word	0x7ff00000

0800640c <__ieee754_powf>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	b087      	sub	sp, #28
 8006412:	9101      	str	r1, [sp, #4]
 8006414:	9c01      	ldr	r4, [sp, #4]
 8006416:	4681      	mov	r9, r0
 8006418:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800641c:	f000 8324 	beq.w	8006a68 <__ieee754_powf+0x65c>
 8006420:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006424:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006428:	4680      	mov	r8, r0
 800642a:	dc06      	bgt.n	800643a <__ieee754_powf+0x2e>
 800642c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006430:	dd09      	ble.n	8006446 <__ieee754_powf+0x3a>
 8006432:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006436:	f000 8317 	beq.w	8006a68 <__ieee754_powf+0x65c>
 800643a:	4885      	ldr	r0, [pc, #532]	; (8006650 <__ieee754_powf+0x244>)
 800643c:	b007      	add	sp, #28
 800643e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006442:	f000 bc9b 	b.w	8006d7c <nanf>
 8006446:	2800      	cmp	r0, #0
 8006448:	da1d      	bge.n	8006486 <__ieee754_powf+0x7a>
 800644a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800644e:	da2b      	bge.n	80064a8 <__ieee754_powf+0x9c>
 8006450:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006454:	db30      	blt.n	80064b8 <__ieee754_powf+0xac>
 8006456:	15fb      	asrs	r3, r7, #23
 8006458:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800645c:	fa47 f503 	asr.w	r5, r7, r3
 8006460:	fa05 f303 	lsl.w	r3, r5, r3
 8006464:	42bb      	cmp	r3, r7
 8006466:	d127      	bne.n	80064b8 <__ieee754_powf+0xac>
 8006468:	f005 0501 	and.w	r5, r5, #1
 800646c:	f1c5 0502 	rsb	r5, r5, #2
 8006470:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006474:	d122      	bne.n	80064bc <__ieee754_powf+0xb0>
 8006476:	2c00      	cmp	r4, #0
 8006478:	4649      	mov	r1, r9
 800647a:	da11      	bge.n	80064a0 <__ieee754_powf+0x94>
 800647c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006480:	f7fa fd14 	bl	8000eac <__aeabi_fdiv>
 8006484:	e021      	b.n	80064ca <__ieee754_powf+0xbe>
 8006486:	2500      	movs	r5, #0
 8006488:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800648c:	d1f0      	bne.n	8006470 <__ieee754_powf+0x64>
 800648e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006492:	f000 82e9 	beq.w	8006a68 <__ieee754_powf+0x65c>
 8006496:	dd09      	ble.n	80064ac <__ieee754_powf+0xa0>
 8006498:	2c00      	cmp	r4, #0
 800649a:	f280 82e8 	bge.w	8006a6e <__ieee754_powf+0x662>
 800649e:	2100      	movs	r1, #0
 80064a0:	4608      	mov	r0, r1
 80064a2:	b007      	add	sp, #28
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	2502      	movs	r5, #2
 80064aa:	e7ed      	b.n	8006488 <__ieee754_powf+0x7c>
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	daf6      	bge.n	800649e <__ieee754_powf+0x92>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064b6:	e7f3      	b.n	80064a0 <__ieee754_powf+0x94>
 80064b8:	2500      	movs	r5, #0
 80064ba:	e7d9      	b.n	8006470 <__ieee754_powf+0x64>
 80064bc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80064c0:	d105      	bne.n	80064ce <__ieee754_powf+0xc2>
 80064c2:	4649      	mov	r1, r9
 80064c4:	4608      	mov	r0, r1
 80064c6:	f7fa fc3d 	bl	8000d44 <__aeabi_fmul>
 80064ca:	4601      	mov	r1, r0
 80064cc:	e7e8      	b.n	80064a0 <__ieee754_powf+0x94>
 80064ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80064d2:	4648      	mov	r0, r9
 80064d4:	d107      	bne.n	80064e6 <__ieee754_powf+0xda>
 80064d6:	f1b8 0f00 	cmp.w	r8, #0
 80064da:	db04      	blt.n	80064e6 <__ieee754_powf+0xda>
 80064dc:	b007      	add	sp, #28
 80064de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e2:	f000 badf 	b.w	8006aa4 <__ieee754_sqrtf>
 80064e6:	f000 fc3d 	bl	8006d64 <fabsf>
 80064ea:	4601      	mov	r1, r0
 80064ec:	b126      	cbz	r6, 80064f8 <__ieee754_powf+0xec>
 80064ee:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80064f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80064f6:	d118      	bne.n	800652a <__ieee754_powf+0x11e>
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	da04      	bge.n	8006506 <__ieee754_powf+0xfa>
 80064fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006500:	f7fa fcd4 	bl	8000eac <__aeabi_fdiv>
 8006504:	4601      	mov	r1, r0
 8006506:	f1b8 0f00 	cmp.w	r8, #0
 800650a:	dac9      	bge.n	80064a0 <__ieee754_powf+0x94>
 800650c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8006510:	ea50 0305 	orrs.w	r3, r0, r5
 8006514:	d104      	bne.n	8006520 <__ieee754_powf+0x114>
 8006516:	4608      	mov	r0, r1
 8006518:	f7fa fb0a 	bl	8000b30 <__aeabi_fsub>
 800651c:	4601      	mov	r1, r0
 800651e:	e7af      	b.n	8006480 <__ieee754_powf+0x74>
 8006520:	2d01      	cmp	r5, #1
 8006522:	d1bd      	bne.n	80064a0 <__ieee754_powf+0x94>
 8006524:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006528:	e7ba      	b.n	80064a0 <__ieee754_powf+0x94>
 800652a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800652e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	432b      	orrs	r3, r5
 8006536:	d101      	bne.n	800653c <__ieee754_powf+0x130>
 8006538:	4649      	mov	r1, r9
 800653a:	e7ec      	b.n	8006516 <__ieee754_powf+0x10a>
 800653c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006540:	f340 8098 	ble.w	8006674 <__ieee754_powf+0x268>
 8006544:	4b43      	ldr	r3, [pc, #268]	; (8006654 <__ieee754_powf+0x248>)
 8006546:	429e      	cmp	r6, r3
 8006548:	dc03      	bgt.n	8006552 <__ieee754_powf+0x146>
 800654a:	2c00      	cmp	r4, #0
 800654c:	daa7      	bge.n	800649e <__ieee754_powf+0x92>
 800654e:	4942      	ldr	r1, [pc, #264]	; (8006658 <__ieee754_powf+0x24c>)
 8006550:	e7b8      	b.n	80064c4 <__ieee754_powf+0xb8>
 8006552:	4b42      	ldr	r3, [pc, #264]	; (800665c <__ieee754_powf+0x250>)
 8006554:	429e      	cmp	r6, r3
 8006556:	dd02      	ble.n	800655e <__ieee754_powf+0x152>
 8006558:	2c00      	cmp	r4, #0
 800655a:	dcf8      	bgt.n	800654e <__ieee754_powf+0x142>
 800655c:	e79f      	b.n	800649e <__ieee754_powf+0x92>
 800655e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006562:	f7fa fae5 	bl	8000b30 <__aeabi_fsub>
 8006566:	493e      	ldr	r1, [pc, #248]	; (8006660 <__ieee754_powf+0x254>)
 8006568:	4606      	mov	r6, r0
 800656a:	f7fa fbeb 	bl	8000d44 <__aeabi_fmul>
 800656e:	493d      	ldr	r1, [pc, #244]	; (8006664 <__ieee754_powf+0x258>)
 8006570:	4607      	mov	r7, r0
 8006572:	4630      	mov	r0, r6
 8006574:	f7fa fbe6 	bl	8000d44 <__aeabi_fmul>
 8006578:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800657c:	4680      	mov	r8, r0
 800657e:	4630      	mov	r0, r6
 8006580:	f7fa fbe0 	bl	8000d44 <__aeabi_fmul>
 8006584:	4601      	mov	r1, r0
 8006586:	4838      	ldr	r0, [pc, #224]	; (8006668 <__ieee754_powf+0x25c>)
 8006588:	f7fa fad2 	bl	8000b30 <__aeabi_fsub>
 800658c:	4631      	mov	r1, r6
 800658e:	f7fa fbd9 	bl	8000d44 <__aeabi_fmul>
 8006592:	4601      	mov	r1, r0
 8006594:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006598:	f7fa faca 	bl	8000b30 <__aeabi_fsub>
 800659c:	4631      	mov	r1, r6
 800659e:	4681      	mov	r9, r0
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7fa fbcf 	bl	8000d44 <__aeabi_fmul>
 80065a6:	4601      	mov	r1, r0
 80065a8:	4648      	mov	r0, r9
 80065aa:	f7fa fbcb 	bl	8000d44 <__aeabi_fmul>
 80065ae:	492f      	ldr	r1, [pc, #188]	; (800666c <__ieee754_powf+0x260>)
 80065b0:	f7fa fbc8 	bl	8000d44 <__aeabi_fmul>
 80065b4:	4601      	mov	r1, r0
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7fa faba 	bl	8000b30 <__aeabi_fsub>
 80065bc:	4601      	mov	r1, r0
 80065be:	4606      	mov	r6, r0
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7fa fab7 	bl	8000b34 <__addsf3>
 80065c6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 80065ca:	f02a 0a0f 	bic.w	sl, sl, #15
 80065ce:	4639      	mov	r1, r7
 80065d0:	4650      	mov	r0, sl
 80065d2:	f7fa faad 	bl	8000b30 <__aeabi_fsub>
 80065d6:	4601      	mov	r1, r0
 80065d8:	4630      	mov	r0, r6
 80065da:	f7fa faa9 	bl	8000b30 <__aeabi_fsub>
 80065de:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	3d01      	subs	r5, #1
 80065e6:	f024 040f 	bic.w	r4, r4, #15
 80065ea:	432b      	orrs	r3, r5
 80065ec:	4606      	mov	r6, r0
 80065ee:	4621      	mov	r1, r4
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	bf0c      	ite	eq
 80065f4:	4d1e      	ldreq	r5, [pc, #120]	; (8006670 <__ieee754_powf+0x264>)
 80065f6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 80065fa:	f7fa fa99 	bl	8000b30 <__aeabi_fsub>
 80065fe:	4651      	mov	r1, sl
 8006600:	f7fa fba0 	bl	8000d44 <__aeabi_fmul>
 8006604:	9901      	ldr	r1, [sp, #4]
 8006606:	4607      	mov	r7, r0
 8006608:	4630      	mov	r0, r6
 800660a:	f7fa fb9b 	bl	8000d44 <__aeabi_fmul>
 800660e:	4601      	mov	r1, r0
 8006610:	4638      	mov	r0, r7
 8006612:	f7fa fa8f 	bl	8000b34 <__addsf3>
 8006616:	4621      	mov	r1, r4
 8006618:	4606      	mov	r6, r0
 800661a:	4650      	mov	r0, sl
 800661c:	f7fa fb92 	bl	8000d44 <__aeabi_fmul>
 8006620:	4601      	mov	r1, r0
 8006622:	4607      	mov	r7, r0
 8006624:	4681      	mov	r9, r0
 8006626:	4630      	mov	r0, r6
 8006628:	f7fa fa84 	bl	8000b34 <__addsf3>
 800662c:	2800      	cmp	r0, #0
 800662e:	4682      	mov	sl, r0
 8006630:	4680      	mov	r8, r0
 8006632:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006636:	f340 81fb 	ble.w	8006a30 <__ieee754_powf+0x624>
 800663a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800663e:	f340 8149 	ble.w	80068d4 <__ieee754_powf+0x4c8>
 8006642:	4905      	ldr	r1, [pc, #20]	; (8006658 <__ieee754_powf+0x24c>)
 8006644:	4628      	mov	r0, r5
 8006646:	f7fa fb7d 	bl	8000d44 <__aeabi_fmul>
 800664a:	4903      	ldr	r1, [pc, #12]	; (8006658 <__ieee754_powf+0x24c>)
 800664c:	e73b      	b.n	80064c6 <__ieee754_powf+0xba>
 800664e:	bf00      	nop
 8006650:	08006f48 	.word	0x08006f48
 8006654:	3f7ffff7 	.word	0x3f7ffff7
 8006658:	7149f2ca 	.word	0x7149f2ca
 800665c:	3f800007 	.word	0x3f800007
 8006660:	3fb8aa00 	.word	0x3fb8aa00
 8006664:	36eca570 	.word	0x36eca570
 8006668:	3eaaaaab 	.word	0x3eaaaaab
 800666c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006670:	bf800000 	.word	0xbf800000
 8006674:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8006678:	f280 810a 	bge.w	8006890 <__ieee754_powf+0x484>
 800667c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8006680:	f7fa fb60 	bl	8000d44 <__aeabi_fmul>
 8006684:	f06f 0217 	mvn.w	r2, #23
 8006688:	4606      	mov	r6, r0
 800668a:	15f3      	asrs	r3, r6, #23
 800668c:	3b7f      	subs	r3, #127	; 0x7f
 800668e:	441a      	add	r2, r3
 8006690:	4b81      	ldr	r3, [pc, #516]	; (8006898 <__ieee754_powf+0x48c>)
 8006692:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8006696:	4298      	cmp	r0, r3
 8006698:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800669c:	dd06      	ble.n	80066ac <__ieee754_powf+0x2a0>
 800669e:	4b7f      	ldr	r3, [pc, #508]	; (800689c <__ieee754_powf+0x490>)
 80066a0:	4298      	cmp	r0, r3
 80066a2:	f340 80f7 	ble.w	8006894 <__ieee754_powf+0x488>
 80066a6:	3201      	adds	r2, #1
 80066a8:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80066ac:	2700      	movs	r7, #0
 80066ae:	4b7c      	ldr	r3, [pc, #496]	; (80068a0 <__ieee754_powf+0x494>)
 80066b0:	4630      	mov	r0, r6
 80066b2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80066b6:	9205      	str	r2, [sp, #20]
 80066b8:	4619      	mov	r1, r3
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	f7fa fa38 	bl	8000b30 <__aeabi_fsub>
 80066c0:	4631      	mov	r1, r6
 80066c2:	4683      	mov	fp, r0
 80066c4:	9802      	ldr	r0, [sp, #8]
 80066c6:	f7fa fa35 	bl	8000b34 <__addsf3>
 80066ca:	4601      	mov	r1, r0
 80066cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80066d0:	f7fa fbec 	bl	8000eac <__aeabi_fdiv>
 80066d4:	4601      	mov	r1, r0
 80066d6:	9004      	str	r0, [sp, #16]
 80066d8:	4658      	mov	r0, fp
 80066da:	f7fa fb33 	bl	8000d44 <__aeabi_fmul>
 80066de:	46b2      	mov	sl, r6
 80066e0:	1076      	asrs	r6, r6, #1
 80066e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80066e6:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80066ea:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80066ee:	f028 080f 	bic.w	r8, r8, #15
 80066f2:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 80066f6:	4681      	mov	r9, r0
 80066f8:	4631      	mov	r1, r6
 80066fa:	4640      	mov	r0, r8
 80066fc:	f7fa fb22 	bl	8000d44 <__aeabi_fmul>
 8006700:	4601      	mov	r1, r0
 8006702:	4658      	mov	r0, fp
 8006704:	f7fa fa14 	bl	8000b30 <__aeabi_fsub>
 8006708:	9902      	ldr	r1, [sp, #8]
 800670a:	4683      	mov	fp, r0
 800670c:	4630      	mov	r0, r6
 800670e:	f7fa fa0f 	bl	8000b30 <__aeabi_fsub>
 8006712:	4601      	mov	r1, r0
 8006714:	4650      	mov	r0, sl
 8006716:	f7fa fa0b 	bl	8000b30 <__aeabi_fsub>
 800671a:	4641      	mov	r1, r8
 800671c:	f7fa fb12 	bl	8000d44 <__aeabi_fmul>
 8006720:	4601      	mov	r1, r0
 8006722:	4658      	mov	r0, fp
 8006724:	f7fa fa04 	bl	8000b30 <__aeabi_fsub>
 8006728:	9b04      	ldr	r3, [sp, #16]
 800672a:	4619      	mov	r1, r3
 800672c:	f7fa fb0a 	bl	8000d44 <__aeabi_fmul>
 8006730:	4649      	mov	r1, r9
 8006732:	4683      	mov	fp, r0
 8006734:	4648      	mov	r0, r9
 8006736:	f7fa fb05 	bl	8000d44 <__aeabi_fmul>
 800673a:	4606      	mov	r6, r0
 800673c:	4959      	ldr	r1, [pc, #356]	; (80068a4 <__ieee754_powf+0x498>)
 800673e:	f7fa fb01 	bl	8000d44 <__aeabi_fmul>
 8006742:	4959      	ldr	r1, [pc, #356]	; (80068a8 <__ieee754_powf+0x49c>)
 8006744:	f7fa f9f6 	bl	8000b34 <__addsf3>
 8006748:	4631      	mov	r1, r6
 800674a:	f7fa fafb 	bl	8000d44 <__aeabi_fmul>
 800674e:	4957      	ldr	r1, [pc, #348]	; (80068ac <__ieee754_powf+0x4a0>)
 8006750:	f7fa f9f0 	bl	8000b34 <__addsf3>
 8006754:	4631      	mov	r1, r6
 8006756:	f7fa faf5 	bl	8000d44 <__aeabi_fmul>
 800675a:	4955      	ldr	r1, [pc, #340]	; (80068b0 <__ieee754_powf+0x4a4>)
 800675c:	f7fa f9ea 	bl	8000b34 <__addsf3>
 8006760:	4631      	mov	r1, r6
 8006762:	f7fa faef 	bl	8000d44 <__aeabi_fmul>
 8006766:	4953      	ldr	r1, [pc, #332]	; (80068b4 <__ieee754_powf+0x4a8>)
 8006768:	f7fa f9e4 	bl	8000b34 <__addsf3>
 800676c:	4631      	mov	r1, r6
 800676e:	f7fa fae9 	bl	8000d44 <__aeabi_fmul>
 8006772:	4951      	ldr	r1, [pc, #324]	; (80068b8 <__ieee754_powf+0x4ac>)
 8006774:	f7fa f9de 	bl	8000b34 <__addsf3>
 8006778:	4631      	mov	r1, r6
 800677a:	4682      	mov	sl, r0
 800677c:	4630      	mov	r0, r6
 800677e:	f7fa fae1 	bl	8000d44 <__aeabi_fmul>
 8006782:	4601      	mov	r1, r0
 8006784:	4650      	mov	r0, sl
 8006786:	f7fa fadd 	bl	8000d44 <__aeabi_fmul>
 800678a:	4606      	mov	r6, r0
 800678c:	4649      	mov	r1, r9
 800678e:	4640      	mov	r0, r8
 8006790:	f7fa f9d0 	bl	8000b34 <__addsf3>
 8006794:	4659      	mov	r1, fp
 8006796:	f7fa fad5 	bl	8000d44 <__aeabi_fmul>
 800679a:	4631      	mov	r1, r6
 800679c:	f7fa f9ca 	bl	8000b34 <__addsf3>
 80067a0:	4641      	mov	r1, r8
 80067a2:	4682      	mov	sl, r0
 80067a4:	4640      	mov	r0, r8
 80067a6:	f7fa facd 	bl	8000d44 <__aeabi_fmul>
 80067aa:	4944      	ldr	r1, [pc, #272]	; (80068bc <__ieee754_powf+0x4b0>)
 80067ac:	9002      	str	r0, [sp, #8]
 80067ae:	f7fa f9c1 	bl	8000b34 <__addsf3>
 80067b2:	4651      	mov	r1, sl
 80067b4:	f7fa f9be 	bl	8000b34 <__addsf3>
 80067b8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80067bc:	f026 060f 	bic.w	r6, r6, #15
 80067c0:	4631      	mov	r1, r6
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7fa fabe 	bl	8000d44 <__aeabi_fmul>
 80067c8:	493c      	ldr	r1, [pc, #240]	; (80068bc <__ieee754_powf+0x4b0>)
 80067ca:	4680      	mov	r8, r0
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7fa f9af 	bl	8000b30 <__aeabi_fsub>
 80067d2:	9b02      	ldr	r3, [sp, #8]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f7fa f9ab 	bl	8000b30 <__aeabi_fsub>
 80067da:	4601      	mov	r1, r0
 80067dc:	4650      	mov	r0, sl
 80067de:	f7fa f9a7 	bl	8000b30 <__aeabi_fsub>
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7fa faae 	bl	8000d44 <__aeabi_fmul>
 80067e8:	4659      	mov	r1, fp
 80067ea:	4681      	mov	r9, r0
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7fa faa9 	bl	8000d44 <__aeabi_fmul>
 80067f2:	4601      	mov	r1, r0
 80067f4:	4648      	mov	r0, r9
 80067f6:	f7fa f99d 	bl	8000b34 <__addsf3>
 80067fa:	4682      	mov	sl, r0
 80067fc:	4601      	mov	r1, r0
 80067fe:	4640      	mov	r0, r8
 8006800:	f7fa f998 	bl	8000b34 <__addsf3>
 8006804:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006808:	f029 090f 	bic.w	r9, r9, #15
 800680c:	492c      	ldr	r1, [pc, #176]	; (80068c0 <__ieee754_powf+0x4b4>)
 800680e:	4648      	mov	r0, r9
 8006810:	f7fa fa98 	bl	8000d44 <__aeabi_fmul>
 8006814:	4641      	mov	r1, r8
 8006816:	4606      	mov	r6, r0
 8006818:	4648      	mov	r0, r9
 800681a:	f7fa f989 	bl	8000b30 <__aeabi_fsub>
 800681e:	4601      	mov	r1, r0
 8006820:	4650      	mov	r0, sl
 8006822:	f7fa f985 	bl	8000b30 <__aeabi_fsub>
 8006826:	4927      	ldr	r1, [pc, #156]	; (80068c4 <__ieee754_powf+0x4b8>)
 8006828:	f7fa fa8c 	bl	8000d44 <__aeabi_fmul>
 800682c:	4926      	ldr	r1, [pc, #152]	; (80068c8 <__ieee754_powf+0x4bc>)
 800682e:	4680      	mov	r8, r0
 8006830:	4648      	mov	r0, r9
 8006832:	f7fa fa87 	bl	8000d44 <__aeabi_fmul>
 8006836:	4601      	mov	r1, r0
 8006838:	4640      	mov	r0, r8
 800683a:	f7fa f97b 	bl	8000b34 <__addsf3>
 800683e:	4b23      	ldr	r3, [pc, #140]	; (80068cc <__ieee754_powf+0x4c0>)
 8006840:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8006844:	f7fa f976 	bl	8000b34 <__addsf3>
 8006848:	9a05      	ldr	r2, [sp, #20]
 800684a:	4680      	mov	r8, r0
 800684c:	4610      	mov	r0, r2
 800684e:	f7fa fa25 	bl	8000c9c <__aeabi_i2f>
 8006852:	4681      	mov	r9, r0
 8006854:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <__ieee754_powf+0x4c4>)
 8006856:	4641      	mov	r1, r8
 8006858:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800685c:	4630      	mov	r0, r6
 800685e:	f7fa f969 	bl	8000b34 <__addsf3>
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f966 	bl	8000b34 <__addsf3>
 8006868:	4649      	mov	r1, r9
 800686a:	f7fa f963 	bl	8000b34 <__addsf3>
 800686e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8006872:	f02a 0a0f 	bic.w	sl, sl, #15
 8006876:	4649      	mov	r1, r9
 8006878:	4650      	mov	r0, sl
 800687a:	f7fa f959 	bl	8000b30 <__aeabi_fsub>
 800687e:	4639      	mov	r1, r7
 8006880:	f7fa f956 	bl	8000b30 <__aeabi_fsub>
 8006884:	4631      	mov	r1, r6
 8006886:	f7fa f953 	bl	8000b30 <__aeabi_fsub>
 800688a:	4601      	mov	r1, r0
 800688c:	4640      	mov	r0, r8
 800688e:	e6a4      	b.n	80065da <__ieee754_powf+0x1ce>
 8006890:	2200      	movs	r2, #0
 8006892:	e6fa      	b.n	800668a <__ieee754_powf+0x27e>
 8006894:	2701      	movs	r7, #1
 8006896:	e70a      	b.n	80066ae <__ieee754_powf+0x2a2>
 8006898:	001cc471 	.word	0x001cc471
 800689c:	005db3d6 	.word	0x005db3d6
 80068a0:	08006f80 	.word	0x08006f80
 80068a4:	3e53f142 	.word	0x3e53f142
 80068a8:	3e6c3255 	.word	0x3e6c3255
 80068ac:	3e8ba305 	.word	0x3e8ba305
 80068b0:	3eaaaaab 	.word	0x3eaaaaab
 80068b4:	3edb6db7 	.word	0x3edb6db7
 80068b8:	3f19999a 	.word	0x3f19999a
 80068bc:	40400000 	.word	0x40400000
 80068c0:	3f763800 	.word	0x3f763800
 80068c4:	3f76384f 	.word	0x3f76384f
 80068c8:	369dc3a0 	.word	0x369dc3a0
 80068cc:	08006f90 	.word	0x08006f90
 80068d0:	08006f88 	.word	0x08006f88
 80068d4:	f040 80c0 	bne.w	8006a58 <__ieee754_powf+0x64c>
 80068d8:	4966      	ldr	r1, [pc, #408]	; (8006a74 <__ieee754_powf+0x668>)
 80068da:	4630      	mov	r0, r6
 80068dc:	f7fa f92a 	bl	8000b34 <__addsf3>
 80068e0:	4639      	mov	r1, r7
 80068e2:	4681      	mov	r9, r0
 80068e4:	4650      	mov	r0, sl
 80068e6:	f7fa f923 	bl	8000b30 <__aeabi_fsub>
 80068ea:	4601      	mov	r1, r0
 80068ec:	4648      	mov	r0, r9
 80068ee:	f7fa fbe5 	bl	80010bc <__aeabi_fcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f47f aea5 	bne.w	8006642 <__ieee754_powf+0x236>
 80068f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068fc:	15e4      	asrs	r4, r4, #23
 80068fe:	3c7e      	subs	r4, #126	; 0x7e
 8006900:	4123      	asrs	r3, r4
 8006902:	4443      	add	r3, r8
 8006904:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006908:	495b      	ldr	r1, [pc, #364]	; (8006a78 <__ieee754_powf+0x66c>)
 800690a:	3a7f      	subs	r2, #127	; 0x7f
 800690c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8006910:	4111      	asrs	r1, r2
 8006912:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006916:	f1c2 0217 	rsb	r2, r2, #23
 800691a:	4114      	asrs	r4, r2
 800691c:	f1b8 0f00 	cmp.w	r8, #0
 8006920:	ea23 0101 	bic.w	r1, r3, r1
 8006924:	4638      	mov	r0, r7
 8006926:	bfb8      	it	lt
 8006928:	4264      	neglt	r4, r4
 800692a:	f7fa f901 	bl	8000b30 <__aeabi_fsub>
 800692e:	4681      	mov	r9, r0
 8006930:	4631      	mov	r1, r6
 8006932:	4648      	mov	r0, r9
 8006934:	f7fa f8fe 	bl	8000b34 <__addsf3>
 8006938:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800693c:	f027 070f 	bic.w	r7, r7, #15
 8006940:	494e      	ldr	r1, [pc, #312]	; (8006a7c <__ieee754_powf+0x670>)
 8006942:	4638      	mov	r0, r7
 8006944:	f7fa f9fe 	bl	8000d44 <__aeabi_fmul>
 8006948:	4649      	mov	r1, r9
 800694a:	4680      	mov	r8, r0
 800694c:	4638      	mov	r0, r7
 800694e:	f7fa f8ef 	bl	8000b30 <__aeabi_fsub>
 8006952:	4601      	mov	r1, r0
 8006954:	4630      	mov	r0, r6
 8006956:	f7fa f8eb 	bl	8000b30 <__aeabi_fsub>
 800695a:	4949      	ldr	r1, [pc, #292]	; (8006a80 <__ieee754_powf+0x674>)
 800695c:	f7fa f9f2 	bl	8000d44 <__aeabi_fmul>
 8006960:	4948      	ldr	r1, [pc, #288]	; (8006a84 <__ieee754_powf+0x678>)
 8006962:	4606      	mov	r6, r0
 8006964:	4638      	mov	r0, r7
 8006966:	f7fa f9ed 	bl	8000d44 <__aeabi_fmul>
 800696a:	4601      	mov	r1, r0
 800696c:	4630      	mov	r0, r6
 800696e:	f7fa f8e1 	bl	8000b34 <__addsf3>
 8006972:	4607      	mov	r7, r0
 8006974:	4601      	mov	r1, r0
 8006976:	4640      	mov	r0, r8
 8006978:	f7fa f8dc 	bl	8000b34 <__addsf3>
 800697c:	4641      	mov	r1, r8
 800697e:	4606      	mov	r6, r0
 8006980:	f7fa f8d6 	bl	8000b30 <__aeabi_fsub>
 8006984:	4601      	mov	r1, r0
 8006986:	4638      	mov	r0, r7
 8006988:	f7fa f8d2 	bl	8000b30 <__aeabi_fsub>
 800698c:	4631      	mov	r1, r6
 800698e:	4680      	mov	r8, r0
 8006990:	4630      	mov	r0, r6
 8006992:	f7fa f9d7 	bl	8000d44 <__aeabi_fmul>
 8006996:	4607      	mov	r7, r0
 8006998:	493b      	ldr	r1, [pc, #236]	; (8006a88 <__ieee754_powf+0x67c>)
 800699a:	f7fa f9d3 	bl	8000d44 <__aeabi_fmul>
 800699e:	493b      	ldr	r1, [pc, #236]	; (8006a8c <__ieee754_powf+0x680>)
 80069a0:	f7fa f8c6 	bl	8000b30 <__aeabi_fsub>
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7fa f9cd 	bl	8000d44 <__aeabi_fmul>
 80069aa:	4939      	ldr	r1, [pc, #228]	; (8006a90 <__ieee754_powf+0x684>)
 80069ac:	f7fa f8c2 	bl	8000b34 <__addsf3>
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7fa f9c7 	bl	8000d44 <__aeabi_fmul>
 80069b6:	4937      	ldr	r1, [pc, #220]	; (8006a94 <__ieee754_powf+0x688>)
 80069b8:	f7fa f8ba 	bl	8000b30 <__aeabi_fsub>
 80069bc:	4639      	mov	r1, r7
 80069be:	f7fa f9c1 	bl	8000d44 <__aeabi_fmul>
 80069c2:	4935      	ldr	r1, [pc, #212]	; (8006a98 <__ieee754_powf+0x68c>)
 80069c4:	f7fa f8b6 	bl	8000b34 <__addsf3>
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7fa f9bb 	bl	8000d44 <__aeabi_fmul>
 80069ce:	4601      	mov	r1, r0
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7fa f8ad 	bl	8000b30 <__aeabi_fsub>
 80069d6:	4607      	mov	r7, r0
 80069d8:	4601      	mov	r1, r0
 80069da:	4630      	mov	r0, r6
 80069dc:	f7fa f9b2 	bl	8000d44 <__aeabi_fmul>
 80069e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069e4:	4681      	mov	r9, r0
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7fa f8a2 	bl	8000b30 <__aeabi_fsub>
 80069ec:	4601      	mov	r1, r0
 80069ee:	4648      	mov	r0, r9
 80069f0:	f7fa fa5c 	bl	8000eac <__aeabi_fdiv>
 80069f4:	4641      	mov	r1, r8
 80069f6:	4607      	mov	r7, r0
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7fa f9a3 	bl	8000d44 <__aeabi_fmul>
 80069fe:	4641      	mov	r1, r8
 8006a00:	f7fa f898 	bl	8000b34 <__addsf3>
 8006a04:	4601      	mov	r1, r0
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7fa f892 	bl	8000b30 <__aeabi_fsub>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	f7fa f88f 	bl	8000b30 <__aeabi_fsub>
 8006a12:	4601      	mov	r1, r0
 8006a14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a18:	f7fa f88a 	bl	8000b30 <__aeabi_fsub>
 8006a1c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a24:	da1e      	bge.n	8006a64 <__ieee754_powf+0x658>
 8006a26:	4621      	mov	r1, r4
 8006a28:	f000 f9fc 	bl	8006e24 <scalbnf>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	e54a      	b.n	80064c6 <__ieee754_powf+0xba>
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <__ieee754_powf+0x690>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	dd05      	ble.n	8006a42 <__ieee754_powf+0x636>
 8006a36:	491a      	ldr	r1, [pc, #104]	; (8006aa0 <__ieee754_powf+0x694>)
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7fa f983 	bl	8000d44 <__aeabi_fmul>
 8006a3e:	4918      	ldr	r1, [pc, #96]	; (8006aa0 <__ieee754_powf+0x694>)
 8006a40:	e541      	b.n	80064c6 <__ieee754_powf+0xba>
 8006a42:	d109      	bne.n	8006a58 <__ieee754_powf+0x64c>
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7fa f873 	bl	8000b30 <__aeabi_fsub>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	f7fa fb2c 	bl	80010a8 <__aeabi_fcmpge>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f43f af51 	beq.w	80068f8 <__ieee754_powf+0x4ec>
 8006a56:	e7ee      	b.n	8006a36 <__ieee754_powf+0x62a>
 8006a58:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006a5c:	f73f af4c 	bgt.w	80068f8 <__ieee754_powf+0x4ec>
 8006a60:	2400      	movs	r4, #0
 8006a62:	e765      	b.n	8006930 <__ieee754_powf+0x524>
 8006a64:	4618      	mov	r0, r3
 8006a66:	e7e1      	b.n	8006a2c <__ieee754_powf+0x620>
 8006a68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006a6c:	e518      	b.n	80064a0 <__ieee754_powf+0x94>
 8006a6e:	9901      	ldr	r1, [sp, #4]
 8006a70:	e516      	b.n	80064a0 <__ieee754_powf+0x94>
 8006a72:	bf00      	nop
 8006a74:	3338aa3c 	.word	0x3338aa3c
 8006a78:	007fffff 	.word	0x007fffff
 8006a7c:	3f317200 	.word	0x3f317200
 8006a80:	3f317218 	.word	0x3f317218
 8006a84:	35bfbe8c 	.word	0x35bfbe8c
 8006a88:	3331bb4c 	.word	0x3331bb4c
 8006a8c:	35ddea0e 	.word	0x35ddea0e
 8006a90:	388ab355 	.word	0x388ab355
 8006a94:	3b360b61 	.word	0x3b360b61
 8006a98:	3e2aaaab 	.word	0x3e2aaaab
 8006a9c:	43160000 	.word	0x43160000
 8006aa0:	0da24260 	.word	0x0da24260

08006aa4 <__ieee754_sqrtf>:
 8006aa4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006aa8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	d309      	bcc.n	8006ac8 <__ieee754_sqrtf+0x24>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	f7fa f945 	bl	8000d44 <__aeabi_fmul>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7fa f839 	bl	8000b34 <__addsf3>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	d0fb      	beq.n	8006ac4 <__ieee754_sqrtf+0x20>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	da06      	bge.n	8006ade <__ieee754_sqrtf+0x3a>
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	f7fa f82d 	bl	8000b30 <__aeabi_fsub>
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	f7fa f9e8 	bl	8000eac <__aeabi_fdiv>
 8006adc:	e7f1      	b.n	8006ac2 <__ieee754_sqrtf+0x1e>
 8006ade:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006ae2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8006ae6:	d32e      	bcc.n	8006b46 <__ieee754_sqrtf+0xa2>
 8006ae8:	3c7f      	subs	r4, #127	; 0x7f
 8006aea:	07e2      	lsls	r2, r4, #31
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	ea4f 0164 	mov.w	r1, r4, asr #1
 8006af4:	4616      	mov	r6, r2
 8006af6:	f04f 0419 	mov.w	r4, #25
 8006afa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006afe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b06:	bf48      	it	mi
 8006b08:	005b      	lslmi	r3, r3, #1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	1835      	adds	r5, r6, r0
 8006b0e:	429d      	cmp	r5, r3
 8006b10:	bfde      	ittt	le
 8006b12:	182e      	addle	r6, r5, r0
 8006b14:	1b5b      	suble	r3, r3, r5
 8006b16:	1812      	addle	r2, r2, r0
 8006b18:	3c01      	subs	r4, #1
 8006b1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b1e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006b22:	d1f3      	bne.n	8006b0c <__ieee754_sqrtf+0x68>
 8006b24:	b113      	cbz	r3, 8006b2c <__ieee754_sqrtf+0x88>
 8006b26:	3201      	adds	r2, #1
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	1054      	asrs	r4, r2, #1
 8006b2e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006b32:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8006b36:	e7c5      	b.n	8006ac4 <__ieee754_sqrtf+0x20>
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	0219      	lsls	r1, r3, #8
 8006b3e:	d5fb      	bpl.n	8006b38 <__ieee754_sqrtf+0x94>
 8006b40:	3a01      	subs	r2, #1
 8006b42:	1aa4      	subs	r4, r4, r2
 8006b44:	e7d0      	b.n	8006ae8 <__ieee754_sqrtf+0x44>
 8006b46:	2200      	movs	r2, #0
 8006b48:	e7f8      	b.n	8006b3c <__ieee754_sqrtf+0x98>

08006b4a <fabs>:
 8006b4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4770      	bx	lr

08006b52 <finite>:
 8006b52:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006b56:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006b5a:	0fc0      	lsrs	r0, r0, #31
 8006b5c:	4770      	bx	lr

08006b5e <matherr>:
 8006b5e:	2000      	movs	r0, #0
 8006b60:	4770      	bx	lr
	...

08006b64 <nan>:
 8006b64:	2000      	movs	r0, #0
 8006b66:	4901      	ldr	r1, [pc, #4]	; (8006b6c <nan+0x8>)
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	7ff80000 	.word	0x7ff80000

08006b70 <rint>:
 8006b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b76:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8006b7a:	f1bc 0f13 	cmp.w	ip, #19
 8006b7e:	4604      	mov	r4, r0
 8006b80:	460d      	mov	r5, r1
 8006b82:	460b      	mov	r3, r1
 8006b84:	4606      	mov	r6, r0
 8006b86:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006b8a:	dc5a      	bgt.n	8006c42 <rint+0xd2>
 8006b8c:	f1bc 0f00 	cmp.w	ip, #0
 8006b90:	da2b      	bge.n	8006bea <rint+0x7a>
 8006b92:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006b96:	4302      	orrs	r2, r0
 8006b98:	d023      	beq.n	8006be2 <rint+0x72>
 8006b9a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006b9e:	4302      	orrs	r2, r0
 8006ba0:	4256      	negs	r6, r2
 8006ba2:	4316      	orrs	r6, r2
 8006ba4:	0c4b      	lsrs	r3, r1, #17
 8006ba6:	0b36      	lsrs	r6, r6, #12
 8006ba8:	4934      	ldr	r1, [pc, #208]	; (8006c7c <rint+0x10c>)
 8006baa:	045b      	lsls	r3, r3, #17
 8006bac:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006bb0:	ea46 0503 	orr.w	r5, r6, r3
 8006bb4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006bb8:	4602      	mov	r2, r0
 8006bba:	462b      	mov	r3, r5
 8006bbc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fad2 	bl	800016c <__adddf3>
 8006bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8006bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	f7f9 fac8 	bl	8000168 <__aeabi_dsub>
 8006bd8:	4604      	mov	r4, r0
 8006bda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bde:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	b003      	add	sp, #12
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <rint+0x110>)
 8006bec:	fa42 f20c 	asr.w	r2, r2, ip
 8006bf0:	4011      	ands	r1, r2
 8006bf2:	4301      	orrs	r1, r0
 8006bf4:	d0f5      	beq.n	8006be2 <rint+0x72>
 8006bf6:	0852      	lsrs	r2, r2, #1
 8006bf8:	ea05 0102 	and.w	r1, r5, r2
 8006bfc:	ea50 0601 	orrs.w	r6, r0, r1
 8006c00:	d00c      	beq.n	8006c1c <rint+0xac>
 8006c02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c06:	f1bc 0f13 	cmp.w	ip, #19
 8006c0a:	bf0c      	ite	eq
 8006c0c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006c10:	2600      	movne	r6, #0
 8006c12:	ea25 0202 	bic.w	r2, r5, r2
 8006c16:	fa43 f30c 	asr.w	r3, r3, ip
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	4917      	ldr	r1, [pc, #92]	; (8006c7c <rint+0x10c>)
 8006c1e:	4632      	mov	r2, r6
 8006c20:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8006c24:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fa9e 	bl	800016c <__adddf3>
 8006c30:	e9cd 0100 	strd	r0, r1, [sp]
 8006c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c38:	4622      	mov	r2, r4
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	f7f9 fa94 	bl	8000168 <__aeabi_dsub>
 8006c40:	e008      	b.n	8006c54 <rint+0xe4>
 8006c42:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8006c46:	dd08      	ble.n	8006c5a <rint+0xea>
 8006c48:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006c4c:	d1c9      	bne.n	8006be2 <rint+0x72>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	f7f9 fa8c 	bl	800016c <__adddf3>
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	e7c3      	b.n	8006be2 <rint+0x72>
 8006c5a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	40ca      	lsrs	r2, r1
 8006c64:	4210      	tst	r0, r2
 8006c66:	d0bc      	beq.n	8006be2 <rint+0x72>
 8006c68:	0852      	lsrs	r2, r2, #1
 8006c6a:	4210      	tst	r0, r2
 8006c6c:	bf1f      	itttt	ne
 8006c6e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006c72:	ea20 0202 	bicne.w	r2, r0, r2
 8006c76:	410e      	asrne	r6, r1
 8006c78:	4316      	orrne	r6, r2
 8006c7a:	e7cf      	b.n	8006c1c <rint+0xac>
 8006c7c:	08006f98 	.word	0x08006f98
 8006c80:	000fffff 	.word	0x000fffff
 8006c84:	00000000 	.word	0x00000000

08006c88 <scalbn>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	4616      	mov	r6, r2
 8006c8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	460b      	mov	r3, r1
 8006c96:	b982      	cbnz	r2, 8006cba <scalbn+0x32>
 8006c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c9c:	4303      	orrs	r3, r0
 8006c9e:	d034      	beq.n	8006d0a <scalbn+0x82>
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <scalbn+0xd0>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <scalbn+0xd4>)
 8006caa:	4604      	mov	r4, r0
 8006cac:	429e      	cmp	r6, r3
 8006cae:	460d      	mov	r5, r1
 8006cb0:	da0d      	bge.n	8006cce <scalbn+0x46>
 8006cb2:	a325      	add	r3, pc, #148	; (adr r3, 8006d48 <scalbn+0xc0>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	e01c      	b.n	8006cf4 <scalbn+0x6c>
 8006cba:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006cbe:	42ba      	cmp	r2, r7
 8006cc0:	d109      	bne.n	8006cd6 <scalbn+0x4e>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	f7f9 fa52 	bl	800016c <__adddf3>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	e01d      	b.n	8006d0a <scalbn+0x82>
 8006cce:	460b      	mov	r3, r1
 8006cd0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006cd4:	3a36      	subs	r2, #54	; 0x36
 8006cd6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006cda:	4432      	add	r2, r6
 8006cdc:	428a      	cmp	r2, r1
 8006cde:	dd0c      	ble.n	8006cfa <scalbn+0x72>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	a11a      	add	r1, pc, #104	; (adr r1, 8006d50 <scalbn+0xc8>)
 8006ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cea:	f000 f8e7 	bl	8006ebc <copysign>
 8006cee:	a318      	add	r3, pc, #96	; (adr r3, 8006d50 <scalbn+0xc8>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fbf0 	bl	80004d8 <__aeabi_dmul>
 8006cf8:	e7e6      	b.n	8006cc8 <scalbn+0x40>
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	dd08      	ble.n	8006d10 <scalbn+0x88>
 8006cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d10:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d14:	da0b      	bge.n	8006d2e <scalbn+0xa6>
 8006d16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d1a:	429e      	cmp	r6, r3
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	462b      	mov	r3, r5
 8006d20:	dce0      	bgt.n	8006ce4 <scalbn+0x5c>
 8006d22:	a109      	add	r1, pc, #36	; (adr r1, 8006d48 <scalbn+0xc0>)
 8006d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d28:	f000 f8c8 	bl	8006ebc <copysign>
 8006d2c:	e7c1      	b.n	8006cb2 <scalbn+0x2a>
 8006d2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d32:	3236      	adds	r2, #54	; 0x36
 8006d34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	2200      	movs	r2, #0
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <scalbn+0xd8>)
 8006d44:	e7d6      	b.n	8006cf4 <scalbn+0x6c>
 8006d46:	bf00      	nop
 8006d48:	c2f8f359 	.word	0xc2f8f359
 8006d4c:	01a56e1f 	.word	0x01a56e1f
 8006d50:	8800759c 	.word	0x8800759c
 8006d54:	7e37e43c 	.word	0x7e37e43c
 8006d58:	43500000 	.word	0x43500000
 8006d5c:	ffff3cb0 	.word	0xffff3cb0
 8006d60:	3c900000 	.word	0x3c900000

08006d64 <fabsf>:
 8006d64:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006d68:	4770      	bx	lr

08006d6a <finitef>:
 8006d6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006d6e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006d72:	bfac      	ite	ge
 8006d74:	2000      	movge	r0, #0
 8006d76:	2001      	movlt	r0, #1
 8006d78:	4770      	bx	lr
	...

08006d7c <nanf>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <nanf+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	7fc00000 	.word	0x7fc00000

08006d84 <rintf>:
 8006d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d86:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006d8a:	0dd5      	lsrs	r5, r2, #23
 8006d8c:	3d7f      	subs	r5, #127	; 0x7f
 8006d8e:	2d16      	cmp	r5, #22
 8006d90:	4601      	mov	r1, r0
 8006d92:	dc3b      	bgt.n	8006e0c <rintf+0x88>
 8006d94:	b1e2      	cbz	r2, 8006dd0 <rintf+0x4c>
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	4602      	mov	r2, r0
 8006d9a:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8006d9e:	da1a      	bge.n	8006dd6 <rintf+0x52>
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <rintf+0x98>)
 8006da2:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8006da6:	4249      	negs	r1, r1
 8006da8:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8006dac:	0d03      	lsrs	r3, r0, #20
 8006dae:	0a49      	lsrs	r1, r1, #9
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006db6:	4319      	orrs	r1, r3
 8006db8:	4628      	mov	r0, r5
 8006dba:	f7f9 febb 	bl	8000b34 <__addsf3>
 8006dbe:	9001      	str	r0, [sp, #4]
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	9801      	ldr	r0, [sp, #4]
 8006dc4:	f7f9 feb4 	bl	8000b30 <__aeabi_fsub>
 8006dc8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8006dcc:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	b003      	add	sp, #12
 8006dd4:	bd30      	pop	{r4, r5, pc}
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <rintf+0x9c>)
 8006dd8:	412b      	asrs	r3, r5
 8006dda:	4218      	tst	r0, r3
 8006ddc:	d0f8      	beq.n	8006dd0 <rintf+0x4c>
 8006dde:	0859      	lsrs	r1, r3, #1
 8006de0:	4208      	tst	r0, r1
 8006de2:	d006      	beq.n	8006df2 <rintf+0x6e>
 8006de4:	ea20 0201 	bic.w	r2, r0, r1
 8006de8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dec:	fa41 f505 	asr.w	r5, r1, r5
 8006df0:	432a      	orrs	r2, r5
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <rintf+0x98>)
 8006df4:	4611      	mov	r1, r2
 8006df6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7f9 fe9a 	bl	8000b34 <__addsf3>
 8006e00:	9001      	str	r0, [sp, #4]
 8006e02:	9801      	ldr	r0, [sp, #4]
 8006e04:	4621      	mov	r1, r4
 8006e06:	f7f9 fe93 	bl	8000b30 <__aeabi_fsub>
 8006e0a:	e004      	b.n	8006e16 <rintf+0x92>
 8006e0c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006e10:	d3de      	bcc.n	8006dd0 <rintf+0x4c>
 8006e12:	f7f9 fe8f 	bl	8000b34 <__addsf3>
 8006e16:	4601      	mov	r1, r0
 8006e18:	e7da      	b.n	8006dd0 <rintf+0x4c>
 8006e1a:	bf00      	nop
 8006e1c:	08006fa8 	.word	0x08006fa8
 8006e20:	007fffff 	.word	0x007fffff

08006e24 <scalbnf>:
 8006e24:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	4601      	mov	r1, r0
 8006e30:	d027      	beq.n	8006e82 <scalbnf+0x5e>
 8006e32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e36:	d303      	bcc.n	8006e40 <scalbnf+0x1c>
 8006e38:	f7f9 fe7c 	bl	8000b34 <__addsf3>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	e020      	b.n	8006e82 <scalbnf+0x5e>
 8006e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e44:	d215      	bcs.n	8006e72 <scalbnf+0x4e>
 8006e46:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006e4a:	f7f9 ff7b 	bl	8000d44 <__aeabi_fmul>
 8006e4e:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <scalbnf+0x8c>)
 8006e50:	4602      	mov	r2, r0
 8006e52:	429c      	cmp	r4, r3
 8006e54:	db22      	blt.n	8006e9c <scalbnf+0x78>
 8006e56:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006e5a:	3b19      	subs	r3, #25
 8006e5c:	4423      	add	r3, r4
 8006e5e:	2bfe      	cmp	r3, #254	; 0xfe
 8006e60:	dd09      	ble.n	8006e76 <scalbnf+0x52>
 8006e62:	4611      	mov	r1, r2
 8006e64:	4813      	ldr	r0, [pc, #76]	; (8006eb4 <scalbnf+0x90>)
 8006e66:	f000 f832 	bl	8006ece <copysignf>
 8006e6a:	4912      	ldr	r1, [pc, #72]	; (8006eb4 <scalbnf+0x90>)
 8006e6c:	f7f9 ff6a 	bl	8000d44 <__aeabi_fmul>
 8006e70:	e7e4      	b.n	8006e3c <scalbnf+0x18>
 8006e72:	0ddb      	lsrs	r3, r3, #23
 8006e74:	e7f2      	b.n	8006e5c <scalbnf+0x38>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dd05      	ble.n	8006e86 <scalbnf+0x62>
 8006e7a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8006e7e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8006e82:	4610      	mov	r0, r2
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	f113 0f16 	cmn.w	r3, #22
 8006e8a:	da09      	bge.n	8006ea0 <scalbnf+0x7c>
 8006e8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006e90:	429c      	cmp	r4, r3
 8006e92:	4611      	mov	r1, r2
 8006e94:	dce6      	bgt.n	8006e64 <scalbnf+0x40>
 8006e96:	4808      	ldr	r0, [pc, #32]	; (8006eb8 <scalbnf+0x94>)
 8006e98:	f000 f819 	bl	8006ece <copysignf>
 8006e9c:	4906      	ldr	r1, [pc, #24]	; (8006eb8 <scalbnf+0x94>)
 8006e9e:	e7e5      	b.n	8006e6c <scalbnf+0x48>
 8006ea0:	3319      	adds	r3, #25
 8006ea2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8006ea6:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8006eaa:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8006eae:	e7dd      	b.n	8006e6c <scalbnf+0x48>
 8006eb0:	ffff3cb0 	.word	0xffff3cb0
 8006eb4:	7149f2ca 	.word	0x7149f2ca
 8006eb8:	0da24260 	.word	0x0da24260

08006ebc <copysign>:
 8006ebc:	b530      	push	{r4, r5, lr}
 8006ebe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	ea42 0503 	orr.w	r5, r2, r3
 8006eca:	4629      	mov	r1, r5
 8006ecc:	bd30      	pop	{r4, r5, pc}

08006ece <copysignf>:
 8006ece:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ed2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006ed6:	4308      	orrs	r0, r1
 8006ed8:	4770      	bx	lr
	...

08006edc <_init>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr

08006ee8 <_fini>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr
